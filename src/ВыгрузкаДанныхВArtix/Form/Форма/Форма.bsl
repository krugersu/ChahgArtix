

&НаКлиенте
Процедура СформироватьШаблонФайла(Команда)
	СформироватьШаблонФайлаНаСервере();
КонецПроцедуры


&НаСервере
Процедура СформироватьШаблонФайлаНаСервере()
	
	
	//  \\192.168.0.234\obmen
	
	//Сообщить( СписокКомманд.ОчисткаСправочникаТоварыСЗависимыми);
	
	
	Для каждого тМагазин Из Объект.СписокМагазинов  Цикл
	
		
	  Если тМагазин.Выбран Тогда
		  
		  текМагазин = Справочники.Склады.НайтиПоНаименованию(тМагазин.МагазинНазвание);
	  	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		
		|	крю_СоответствиеККМ.КассаАртикс КАК НомерНагазина,
		|	крю_СоответствиеККМ.МагазинКомплексная КАК МагазинКомплексная
				|ИЗ
		|	РегистрСведений.крю_СоответствиеККМ КАК крю_СоответствиеККМ
		|ГДЕ
		|	крю_СоответствиеККМ.МагазинКомплексная = &Магазин";
	
	Запрос.УстановитьПараметр("Магазин", текМагазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
  
	  	
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	НомерНагазина = ВыборкаДетальныеЗаписи.НомерНагазина;
	СтруктураНоменклатура = ПолучитьСтруктуруНоменклатуры();

	
	//ИмяФайлаВыгрузки = "H:\Пашков\Задачи\"+"\Обмен с Artix\"+НомерНагазина+"\All.aif";              
	ИмяФайлаВыгрузки = Объект.КаталогВременныхФайлов+НомерНагазина+"\All.aif";

	
	ВидЦены = текМагазин.РозничныйВидЦены;

	
	РезультатЗапросаПоНоменклатуре = ВыполнитьЗапросПоНоменклатуре(ВидЦены);
	НоменклатураСписок = ПолучитьТаблицуНоменклатуры(РезультатЗапросаПоНоменклатуре);
	НоменклатураСписоГрупп = ПолучитьТаблицуГруппНоменклатуры();
	//НоменклатураДляВесов =СформироватьЭлементНоменклатуры( СтруктураНоменклатура);
	НоменклатураДляВесов = ПолучитьТаблицуТоваровДляВесов();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.ОткрытьФайл(ИмяФайлаВыгрузки);
	
	Подвал = "### data end ###";
	Шапка = "### data begin ###";
	ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,Шапка);
	
	
	Разделитель = "---";
	//ЗаписатьJSON(ЗаписьJSON, Шапка, Новый НастройкиСериализацииJSON);
	ПараметрыДжсон = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);

	ЗаписатьКомманду(ТекстовыйФайл,Объект.СписокКомманд.ОчисткаСправочникаТоварыСЗависимыми,ИмяФайлаВыгрузки,ЗаписьJSON,ПараметрыДжсон,Разделитель);
	ЗаписатьКомманду(ТекстовыйФайл,Объект.СписокКомманд.ОчисткаТоваровДляВесов,ИмяФайлаВыгрузки,ЗаписьJSON,ПараметрыДжсон,Разделитель);

	//ЗаписатьКомманду(ТекстовыйФайл,СписокКомманд.ОчисткаГруппуТоваров,ИмяФайлаВыгрузки,ЗаписьJSON,ПараметрыДжсон,Разделитель);

	
	Данные = Новый Структура;
	Данные.Вставить("command", "addInventItem");
	
			
	Для каждого ПозицияНоменклатуры Из  НоменклатураСписок Цикл
		
		
		ЗаполнитьЗначенияСвойств(СтруктураНоменклатура, ПозицияНоменклатуры);
		
		Данные.Вставить("invent", СтруктураНоменклатура);
		ЗаписьJSON.УстановитьСтроку(ПараметрыДжсон);
		
		ЗаписатьJSON(ЗаписьJSON, Данные, Новый НастройкиСериализацииJSON);
		
		СтрJSON = ЗаписьJSON.Закрыть();
		ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,СтрJSON);
		ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,Разделитель);
		
	КонецЦикла; 
	
	ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,СтрJSON);
	ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,Разделитель);
	
	
//	ЗаписьJSON1 = Новый ЗаписьJSON;
	//*****************************************************************************************************************
	Данные = Новый Структура;
	Данные.Вставить("command", "addTmcScale");
	
	СтруктураНоменклатураДляВесов = ПолучитьСтруктуруДляВыгрузкиВВесы();
		
	Для каждого ПозицияНоменклатуры Из  НоменклатураДляВесов Цикл
		
		
		ЗаполнитьЗначенияСвойств(СтруктураНоменклатураДляВесов, ПозицияНоменклатуры);
		
		Данные.Вставить("tmcscale", СтруктураНоменклатураДляВесов);
		ЗаписьJSON.УстановитьСтроку(ПараметрыДжсон);
		
		ЗаписатьJSON(ЗаписьJSON, Данные, Новый НастройкиСериализацииJSON);
		
		СтрJSON = ЗаписьJSON.Закрыть();
		ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,СтрJSON);
		ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,Разделитель);
		
	КонецЦикла; 

	//
	ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,Подвал);
	
	СоздатьФайлФлаг(НомерНагазина);
	
	КонецЕсли; 

	КонецЦикла; 
КонецПроцедуры


&НаСервере
Функция   СформироватьЭлементНоменклатуры(СтруктураНоменклатура)
	
	СсылкаН = Справочники.Номенклатура.НайтиПоКоду("ЦБ-00003048");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Код КАК inventcode,
	|	Номенклатура.Наименование КАК name,
	|	""007"" КАК deptcode,
	|	Номенклатура.Артикул КАК articul
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", СсылкаН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураНоменклатура = РезультатЗапросаВСтруктуру( РезультатЗапроса);
	
	 Возврат СтруктураНоменклатура;
	
КонецФункции


// Возвращает данные первой записи результата запроса в виде структуры.
// 
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - Результат запроса, содержащий данные для обработки.
// 
// Возвращаемое значение:
//  Структура - структура с результатом.
//
Функция РезультатЗапросаВСтруктуру(Знач РезультатЗапроса) Экспорт
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции



Процедура ЗаписатьШапку(ИмяФайлаВыгрузки)
	
	Текст = "### data begin ###";
	
	Буфер = ПолучитьБуферДвоичныхДанныхИзСтроки(Текст);
	ФП = Новый ФайловыйПоток(ИмяФайлаВыгрузки, РежимОткрытияФайла.Дописать);
	ФП.Перейти(1, ПозицияВПотоке.Начало);
	ФП.Записать(Буфер ,0, Буфер.Размер);
	ФП.Закрыть();
	
КонецПроцедуры



Процедура ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайлаВыгрузки,СтрокаСДанными)
	//Текст = СтрокаСДанными;
	
	
	
	ТекстовыйФайл.ДобавитьСтроку(СтрокаСДанными);
	ТекстовыйФайл.Записать(
	ИмяФайлаВыгрузки, // путь для сохранения
	КодировкаТекста.UTF8, // кодировка
	//Символы.ВК // разделитель строк
	);
	
	//Буфер = ПолучитьБуферДвоичныхДанныхИзСтроки(Текст);
	//ФП = Новый ФайловыйПоток(ИмяФайлаВыгрузки, РежимОткрытияФайла.Дописать);
	//ФП.Перейти(1, ПозицияВПотоке.Текущая);
	//ФП.Записать(ПолучитьСтрокуИзБуфераДвоичныхДанных(Буфер) ,0, Буфер.Размер);
	//ФП.Закрыть();
КонецПроцедуры


Функция ВыполнитьЗапросПоНоменклатуре(ВидЦены)
	
	//СсылкаН = Справочники.Номенклатура.НайтиПоКоду("ЦБ-00000204");
	СсылкаН = Справочники.Номенклатура.НайтиПоКоду("КН000793   ");
	ВидНоменклатуры = Новый СписокЗначений;
	ВидНоменклатуры.Добавить( Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар"));   
	ВидНоменклатуры.Добавить( Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво")); 
	ВидНоменклатуры.Добавить( Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Бутылка"));

	ВидНоменклатуры.Добавить( Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Альтернативная табачная продукция"));
	ВидНоменклатуры.Добавить( Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Никотиносодержащая продукция"));
	ВидНоменклатуры.Добавить( Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Табак"));
	//ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("13. Гребенщикова 2");
	
	
	
	НаДату = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта
	|ПОМЕСТИТЬ втЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втШтрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Код КАК inventcode,
	|	Номенклатура.Наименование КАК name,
	|	Номенклатура.Артикул КАК articul,
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	Номенклатура.Крепость КАК alcoholpercent,
	|	Номенклатура.Родитель.Код КАК inventgroup,
	|	Номенклатура.ЕдиницаИзмерения.Код КАК measurecode,
	|	Номенклатура.ВидАлкогольнойПродукции.Код КАК alctypecode,
	|	Номенклатура.ОбъемЗнаменатель КАК taracapacity,

	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.Наименование = ""Фасовка""
	|			ТОГДА 1
	|	КОГДА Номенклатура.ВидНоменклатуры.Наименование = ""Пиво""
	|		ТОГДА 2
	|	КОГДА Номенклатура.ВидНоменклатуры.Наименование = ""Бутылка""
	|		ТОГДА 1

	|		КОГДА Номенклатура.ВесИспользовать
	|			ТОГДА 0
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК taramode,
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ВесИспользовать КАК ВесИспользовать,
	|	Номенклатура.ВесЧислитель КАК ВесЧислитель,
	|	Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры В(&ВидНоменклатуры)
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.inventcode КАК inventcode,
	|	втНоменклатура.name КАК name,
	|	втНоменклатура.articul КАК articul,
	|	втНоменклатура.alcoholpercent КАК alcoholpercent,
	|	втНоменклатура.inventgroup КАК inventgroup,
	|	втНоменклатура.measurecode КАК measurecode,
	|	ВЫБОР
	|		КОГДА втНоменклатура.alctypecode ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ втНоменклатура.alctypecode
	|	КОНЕЦ КАК alctypecode,
	|	втНоменклатура.taramode КАК taramode,
	|	втЦены.Цена КАК price,
	|	ВЫБОР
	|		КОГДА втШтрихкоды.Штрихкод ЕСТЬ NULL
	|			ТОГДА ""1""
	|		ИНАЧЕ втШтрихкоды.Штрихкод
	|	КОНЕЦ КАК barcode,
	|	втНоменклатура.ВесИспользовать КАК ВесИспользовать,
	|	втНоменклатура.taracapacity КАК taracapacity,
	|	втНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	втЦены КАК втЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ втШтрихкоды КАК втШтрихкоды
	|			ПО втНоменклатура.Ссылка = втШтрихкоды.Номенклатура
	|		ПО втЦены.Номенклатура = втНоменклатура.Ссылка";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	//Запрос.УстановитьПараметр("Ссылка", СсылкаН);

	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции	

Функция ПолучитьТаблицуНоменклатуры(РезультатЗапроса)
	
	
	
	тЗнач = Новый ТаблицаЗначений;
	
	тЗнач.Колонки.Добавить("inventcode");
	тЗнач.Колонки.Добавить("name");
	тЗнач.Колонки.Добавить("alcoholpercent");
	тЗнач.Колонки.Добавить("inventgroup");
	тЗнач.Колонки.Добавить("articul");
	
	тЗнач.Колонки.Добавить("measurecode");
	
	тЗнач.Колонки.Добавить("alctypecode");
	тЗнач.Колонки.Добавить("taramode");
	тЗнач.Колонки.Добавить("barcode");
	тЗнач.Колонки.Добавить("barcodes");
	тЗнач.Колонки.Добавить("price");
	тЗнач.Колонки.Добавить("additionalprices");

	тЗнач.Колонки.Добавить("options");
	тЗнач.Колонки.Добавить("sellrestrictperiods");
	тЗнач.Колонки.Добавить("taracapacity");
		
		
	Для каждого тСтрока Из РезультатЗапроса Цикл
		
		// Убрать пробелы
		// Доп обработка, если товар весовой, то вместо штрихкода, артикул
		
		
		нСтрока = тЗнач.Добавить();
		Если тСтрока.ВесИспользовать  Тогда		   
			нСтрока.barcode = СокрлП(тСтрока.articul);
		Иначе 
			нСтрока.barcode = СокрлП(тСтрока.barcode);   
		КонецЕсли; 		   
		
		options = Сформироватьoptions(тСтрока);
		//Если (тСтрока.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
		//	ИЛИ (тСтрока.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
		//	Тогда //ИЛИ (тСтрока.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Никотин)
		//	options.inventitemoptions.tobacco = 1;
		//	
		//Иначе
		//	options.inventitemoptions.tobacco = 0;
		//	
		//КонецЕсли;
		

		нСтрока.options = options;
		нСтрока.sellrestrictperiods = Сформироватьsellrestrictperiods(тСтрока,0, Новый Массив);
		нСтрока.barcodes = Сформироватьbarcodes(тСтрока,0, Новый Массив); // 0 - если вернуть пустой массив
		
		нСтрока.inventgroup = СокрЛП(тСтрока.inventgroup);
		нСтрока.inventcode =  СтрЗаменить(тСтрока.inventcode,Символ(32),"");//СокрЛП(тСтрока.inventcode);
		нСтрока.measurecode = СокрЛП(тСтрока.measurecode);
		нСтрока.name = СокрЛП(тСтрока.name);
		
		нСтрока.taramode = тСтрока.taramode;
		нСтрока.alctypecode = тСтрока.alctypecode;
		нСтрока.alcoholpercent = тСтрока.alcoholpercent;
		нСтрока.articul = тСтрока.articul;
		нСтрока.price = тСтрока.price;
		
		нСтрока.additionalprices =  Сформироватьadditionalprices(тСтрока,0, Новый Массив);
		нСтрока.taracapacity = тСтрока.taracapacity;
		
		
		//     нСтрока.ВесИспользовать = Истина;
		
		
	КонецЦикла; 
	//тЗнач.Колонки.Удалить("ВесИспользовать");
	
	Возврат тЗнач;
	
	
КонецФункции	


Функция ПолучитьТаблицуГруппНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Код КАК groupCode,
	|	Номенклатура.Наименование КАК groupName,
	|	ВЫБОР
	|		КОГДА Номенклатура.Родитель.Код ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ Номенклатура.Родитель.Код
	|	КОНЕЦ КАК parentGroupCode
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого тСтрока Из РезультатЗапроса Цикл
		
		   // Убрать пробелы
		
	КонецЦикла; 
	
	Возврат РезультатЗапроса;
	
КонецФункции	


Функция ПолучитьТаблицуТоваровДляВесов()
	
	//тНоменклатура = Справочники.Номенклатура.НайтиПоКоду("КН000793   ");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Номенклатура.Код КАК tmccode,
	//|	333 КАК plu,
	//|	Номенклатура.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ втНоменклатура
	//|ИЗ
	//|	Справочник.Номенклатура КАК Номенклатура
	//|ГДЕ
	//|	Номенклатура.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	//|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	//|ПОМЕСТИТЬ втШтрихкоды
	//|ИЗ
	//|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	втНоменклатура.tmccode КАК tmccode,
	//|	втНоменклатура.plu КАК plu,
	//|	втШтрихкоды.Штрихкод КАК tmcscalecode
	//|ИЗ
	//|	втШтрихкоды КАК втШтрихкоды
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	//|		ПО втШтрихкоды.Номенклатура = втНоменклатура.Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", тНоменклатура);

	Правило = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.НайтиПоНаименованию("Общее правило для всех ве");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Код КАК tmccode,
		|	Номенклатура.Артикул КАК tmcscalecode,
		|	Номенклатура.Артикул КАК plu,
		|	""10200"" КАК tmcscalegroupcode,
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ВесИспользовать
		|	И Номенклатура.Артикул <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена,
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU
		|ПОМЕСТИТЬ втПЛУ
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|ГДЕ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU,
		|	КодыТоваровSKU.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втСКУ
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.tmccode КАК tmccode,
		|	втТовары.tmcscalecode КАК tmcscalecode,
		|	втТовары.tmcscalegroupcode КАК tmcscalegroupcode,
		|	втПЛУ.КодТовараPLU КАК plu
		|ИЗ
		|	втТовары КАК втТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСКУ КАК втСКУ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПЛУ КАК втПЛУ
		|			ПО (втПЛУ.КодТовараSKU = втСКУ.SKU)
		|		ПО втТовары.Ссылка = втСКУ.Номенклатура";
	
	 Запрос.УстановитьПараметр("ПравилоОбмена", Правило);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	тЗнач = Новый ТаблицаЗначений;
	
	тЗнач.Колонки.Добавить("tmccode");
	тЗнач.Колонки.Добавить("tmcscalecode");
	тЗнач.Колонки.Добавить("plu");
	тЗнач.Колонки.Добавить("tmcscalegroupcode");
	
	
	Для каждого тСтрока Из РезультатЗапроса Цикл
		
		   // Убрать пробелы
		   нСтрока = тЗнач.Добавить();

		   нСтрока.tmccode = СокрЛП(Строка(тСтрока.tmccode));
		   нСтрока.tmcscalecode = СокрЛП(тСтрока.tmcscalecode);
		   нСтрока.plu = СокрЛП(тСтрока.plu);
		   нСтрока.tmcscalegroupcode = СокрЛП(тСтрока.tmcscalegroupcode);
		   
		   
	КонецЦикла; 
	
	Возврат тЗнач;
	
КонецФункции	



Процедура СоздатьФайлФлаг(НомерМагазина)
	
	//	НомерМагазина  = "Обмен с Artix";
	
	//ИмяФайлаВыгрузки = "H:\Пашков\Задачи\"+"\Обмен с Artix\"+ НомерМагазина + "\All.flz";    
	ИмяФайлаВыгрузки = Объект.КаталогВременныхФайлов+НомерМагазина + "\All.flz"; 

	Сообщить(ИмяФайлаВыгрузки);
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.Записать(
	ИмяФайлаВыгрузки // путь для сохранения
	//	КодировкаТекста.UTF8, // кодировка
	//Символы.ВК // разделитель строк
	);
	
	
	
КонецПроцедуры	


&НаСервере
Процедура ПриОткрытииНаСервере()
		
	
	//Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.СписокКомманд = Новый Структура;
	
	// Товары
	Объект.СписокКомманд.Вставить("ОчисткаСправочникаТоварыСЗависимыми", "clearInventory");
	Объект.СписокКомманд.Вставить("ОчисткаСправочникаТовары", "clearTmc");
	
	// Группы товаров
	Объект.СписокКомманд.Вставить("СоздатьГруппуТоваров", "addInventGroup");
	Объект.СписокКомманд.Вставить("ОчисткаГруппуТоваров", "clearInventGroup");
	//СписокКомманд.Вставить("ОчисткаГруппуТоваров", "clearInventGroup");
	// Весы
	Объект.СписокКомманд.Вставить("ОчисткаТоваровДляВесов", "clearTmcScale");


	ПриОткрытииНаСервере();
КонецПроцедуры



Процедура ЗаписатьКомманду(ТекстовыйФайл,Комманда,ИмяФайла,ЗаписьJSON,ПараметрыДжсон,Разделитель)

	
	 Данные = Новый Структура;
	 Данные.Вставить("command", Комманда);

	 
	 ЗаписьJSON.УстановитьСтроку(ПараметрыДжсон);
		
		ЗаписатьJSON(ЗаписьJSON, Данные, Новый НастройкиСериализацииJSON);
		
		СтрJSON = ЗаписьJSON.Закрыть();
		ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайла,СтрJSON);
		ЗаписатьДанныеВФайл(ТекстовыйФайл,ИмяФайла,Разделитель);
	
КонецПроцедуры	



#Область ОписанияСтркутурКоманд

Функция ПолучитьСтруктуруНоменклатуры()
	
	
	
	
	СтруктураНоменклатура = Новый Структура;
	СтруктураНоменклатура.Вставить("inventcode","");
	СтруктураНоменклатура.Вставить("inventgroup","");
	СтруктураНоменклатура.Вставить("name","");
	СтруктураНоменклатура.Вставить("barcode","");
	СтруктураНоменклатура.Вставить("barcodes","");
	СтруктураНоменклатура.Вставить("price","");
	
	СтруктураНоменклатура.Вставить("minprice",0.00);//##
	СтруктураНоменклатура.Вставить("additionalprices",Новый Массив);//##
	
	СтруктураНоменклатура.Вставить("options","");//##
	
	СтруктураНоменклатура.Вставить("sellrestrictperiods",Новый Массив);//##
	СтруктураНоменклатура.Вставить("extendedoptions","");//##
	СтруктураНоменклатура.Вставить("discautoscheme","");//##
	
	СтруктураНоменклатура.Вставить("deptcode","");
	
	СтруктураНоменклатура.Вставить("taxgroupcode","");//##
	//	СтруктураНоменклатура.Вставить("remain","");//##          остаток
	//	СтруктураНоменклатура.Вставить("remaindate","");//##      Дата и время остатков
	
	СтруктураНоменклатура.Вставить("measurecode","");
	СтруктураНоменклатура.Вставить("articul","");
	СтруктураНоменклатура.Вставить("defaultquantity",1);//## Количество по умолчанию
	
	
	СтруктураНоменклатура.Вставить("taramode","");
	СтруктураНоменклатура.Вставить("taracapacity","");
	
	//	СтруктураНоменклатура.Вставить("aspectschemecode","");//##  Код схемы разреза
	//	СтруктураНоменклатура.Вставить("aspectschemecode",0);//##  Возраст
	
	
	
	СтруктураНоменклатура.Вставить("alcoholpercent",0.0);
	СтруктураНоменклатура.Вставить("cquant",1);//## Количество в учетных единицах
	//	СтруктураНоменклатура.Вставить("inn","");//##  ИНН производителя безакцизной алкогольной продукции
	//	СтруктураНоменклатура.Вставить("kpp","");//##  КПП производителя безакцизной алкогольной продукции
	
	СтруктураНоменклатура.Вставить("alctypecode",0); // ????
	
	//	СтруктураНоменклатура.Вставить("paymentobject",0);//##  Признак предмета расчета	
	//	СтруктураНоменклатура.Вставить("manufacturercountrycode",0);//##  Код страны производителя товара
	
	//	СтруктураНоменклатура.Вставить("opmode",0);//## Свойства товара
	СтруктураНоменклатура.Вставить("loyaltymode",0); // Параметры использования воздействий лояльности
	//	СтруктураНоменклатура.Вставить("minretailprice",0);//## Минимальная розничная цена (МРЦ)
	
	options			  = Новый Структура;
	
	inventitemoptions = Новый Структура;
	inventitemoptions.Вставить("tobacco",""); // Является ли товар табачной продукцией
	
	inventitemoptions.Вставить("tobacco",""); // Является ли товар табачной продукцией
	inventitemoptions.Вставить("disablebackinsale",0); // Запретить возврат товара в чеке продажи
	inventitemoptions.Вставить("disableinventshow",0); // Не показывать товар в списках
	inventitemoptions.Вставить("disableinventsale",0); // Запретить продажу товара
	inventitemoptions.Вставить("disableinventback",0); // Запретить возврат товара
	inventitemoptions.Вставить("requiredepartmentmanual",0); // Требовать указание отдела вручную
	inventitemoptions.Вставить("enabledepartmentmanual",1); // Разрешить ввод отдела вручную
	inventitemoptions.Вставить("enablebarcodemanual",1); // Разрешить ввод штрих-кода вручную
	inventitemoptions.Вставить("enablebarcodescanner",1); // Разрешить ввод штрих-кода сканером
	inventitemoptions.Вставить("visualverify",0); // Визуальный контроль товара
	inventitemoptions.Вставить("ageverify",1); // Контроль возраста покупателя
	inventitemoptions.Вставить("requiresalerestrict",0); // Проверять ограничения продаж для товара
	inventitemoptions.Вставить("egaisverify",0); // Проверять алкогольный товар с акцизной маркой в ЕГАИС
	inventitemoptions.Вставить("prepackaged",0); // Является ли товар расфасованным
	inventitemoptions.Вставить("nopdfegaisverify",0); // Проверять алкогольный товар без акцизной марки в ЕГАИС
	inventitemoptions.Вставить("alcoset",0); // Является ли товар алкогольным набором
	inventitemoptions.Вставить("freesale",0); // Является ли товар товаром по свободной цене
	inventitemoptions.Вставить("rfidverify",0); // Является ли товар меховым изделием
	inventitemoptions.Вставить("lowweight",0); // Является ли товар легким товаром
	inventitemoptions.Вставить("weightcontrolbypass",0); // Является ли товар товаром без контроля веса
	inventitemoptions.Вставить("shoes",0); // Является ли товар обувью
	inventitemoptions.Вставить("ignoremarking",0); // Игнорирование признака маркировки
	
	options.Вставить("inventitemoptions",inventitemoptions);
	priceoptions 	  = Новый Структура;
	priceoptions.Вставить("enableexcisemarkprice",""); // Использовать цену табачной продукции из кода маркировки	
	quantityoptions   = Новый Структура;
	remainsoptions 	  = Новый Структура;
	
	
	
	
	
	
	Возврат СтруктураНоменклатура;
	
	
КонецФункции	

Функция ПолучитьСтруктуруГруппТоваров()
	
	СтруктураГруппТоваров = Новый Структура;
	СтруктураГруппТоваров.Вставить("groupCode","");
	СтруктураГруппТоваров.Вставить("parentGroupCode","");
	СтруктураГруппТоваров.Вставить("groupName","");
	
	Возврат СтруктураГруппТоваров;
	
	
КонецФункции	


Функция ПолучитьСтруктуруДляВыгрузкиВВесы()
	
	СтруктураВыгрузкиВВесы = Новый Структура;
	СтруктураВыгрузкиВВесы.Вставить("tmcscalecode","");
	СтруктураВыгрузкиВВесы.Вставить("tmccode","");
	СтруктураВыгрузкиВВесы.Вставить("tmcscalegroupcode","");
	СтруктураВыгрузкиВВесы.Вставить("plu","");

	//СтруктураВыгрузкиВВесы.Вставить("ingredients","");
	//СтруктураВыгрузкиВВесы.Вставить("manufacturer","");
//	СтруктураВыгрузкиВВесы.Вставить("prefix","");
	//СтруктураВыгрузкиВВесы.Вставить("produceddate","");
	//СтруктураВыгрузкиВВесы.Вставить("sellbydate","");
	//СтруктураВыгрузкиВВесы.Вставить("sellbytime","");
	
	Возврат СтруктураВыгрузкиВВесы;
	
	
КонецФункции	

&НаСервере
Процедура ВыгрузитьВесыПриИзмененииНаСервере()
	
	Если НЕ Объект.ВыгрузитьТовары  Тогда
	
	Объект.ВыгрузитьТовары = Истина;
	
	
	КонецЕсли; 
	КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВесыПриИзменении(Элемент)
	Если Объект.ВыгрузитьВесы  Тогда
	
		ВыгрузитьВесыПриИзмененииНаСервере();
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьТоварыПриИзмененииНаСервере()
	Объект.ВыгрузитьВесы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТоварыПриИзменении(Элемент)
	Если НЕ Объект.ВыгрузитьТовары  Тогда
	
		
	
	КонецЕсли; 
	ВыгрузитьТоварыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		СтандартнаяОбработка= Ложь;
	Если Не ВыбратьФайл(Объект[Элемент.Имя], РежимДиалогаВыбораФайла.ВыборКаталога, "Выбор каталога временных файлов") тогда
		Сообщить("Не удалось выбрать каталог!");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте

Функция ВыбратьФайл(ПолноеИмяФайла, Режим, Заголовок)
	
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок                 = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	//Диалог.Фильтр                   = Фильтр;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Диалог.Каталог= ПолноеИмяФайла;
	КонецЕсли;
	
	Если Диалог.Выбрать() Тогда
		ПолноеИмяФайла= Диалог.Каталог;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ВыделитьВсеМагазины(Команда)
	ИзменитьВыборМагазиновНаСервере(Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьВыборМагазиновНаСервере(Действие)
	
	  Для каждого тСтрока  Из Объект.СписокМагазинов Цикл
	  
	  тСтрока.Выбран = Действие;	
	  
	  КонецЦикла; 
КонецПроцедуры



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Др.Значение КАК НомерМагазина,
		|	Магазины.Наименование КАК МагазинНазвание,
		|	1 КАК Выбран
		|ИЗ
		|	Справочник.Склады КАК Магазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК Др
		|		ПО (Др.Ссылка = Магазины.Ссылка)
		|ГДЕ
		|	Др.НомерСтроки = 2
		|	И Др.Значение < 200
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерМагазина";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.СписокМагазинов.Загрузить(РезультатЗапроса);
	
	
	
	

КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеСМагазинов(Команда)
	ИзменитьВыборМагазиновНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВЦентрПриИзменении(Элемент)
	
		Объект.ВыгрузитьВЦентр = ЗначениеЗаполнено(ЭтаФорма.Элементы.НаименованиеЦентральнойБазы);
		
		ЭтаФорма.Элементы.НаименованиеЦентральнойБазы.Доступность = НЕ Объект.ВыгрузитьВЦентр;
	
	
КонецПроцедуры

#КонецОбласти


Функция Сформироватьinvent()

	 invent = Новый Структура;
	 
	 Возврат invent;

	
КонецФункции // ()

// тСтрока - Строка результата запроса
// Заполнить - 0, не заполнять массив, только создавать его
// Данные - массив или структура для заполнения  barcodes

Функция Сформироватьbarcodes(тСтрока,Заполнить,Данные)
	
	barcodes = Новый Массив;
	
	Если Не Заполнить = 0 Тогда
		
		Tbarcodes = Новый Структура;
		Tbarcodes.Вставить("additionalprices",Сформироватьadditionalprices(тСтрока,0, Новый Массив));//!!!!!!!!!!!!!!!!!!
		Tbarcodes.Вставить("aspectvaluesetcode",0);
		Tbarcodes.Вставить("barcode","");
		Tbarcodes.Вставить("cquant",0);
		
		Tbarcodes.Вставить("measurecode",0);
		Tbarcodes.Вставить("minprice",0);
		Tbarcodes.Вставить("name","");
		Tbarcodes.Вставить("packingmeasure",0);
		Tbarcodes.Вставить("packingprice",0);
		Tbarcodes.Вставить("price",0);
		Tbarcodes.Вставить("quantdefault",0);
		Tbarcodes.Вставить("minretailprice",0);
		Tbarcodes.Вставить("customsdeclarationnumber","");
		Tbarcodes.Вставить("tmctype",0);
		Tbarcodes.Вставить("ntin","");
		
		//Дополнить заполнение массива
		 barcodes.Добавить(Tbarcodes);
	КонецЕсли; 
	//
	
	
	Возврат barcodes;
	
	
КонецФункции // ()


// тСтрока - Строка результата запроса
// Заполнить - 0, не заполнять массив, только создавать его
// Данные - массив или структура для заполнения  barcodes

Функция Сформироватьadditionalprices(тСтрока,Заполнить,Данные)

	 additionalprices = Новый Массив;
	 
	 	Если Не Заполнить = 0 Тогда
		
		Tadditionalprices = Новый Структура;
		Tadditionalprices.Вставить("pricecode",0);
		Tadditionalprices.Вставить("price",0);
		Tadditionalprices.Вставить("name","");
				//Дополнить заполнение массива
		 additionalprices.Добавить(Tadditionalprices);
	КонецЕсли; 

	 
	 Возврат additionalprices;

	
КонецФункции // ()


// тСтрока - Строка результата запроса
// Заполнить - 0, не заполнять массив, только создавать его
// Данные - массив или структура для заполнения  barcodes

Функция Сформироватьsellrestrictperiods(тСтрока,Заполнить,Данные)
	 
	 	 sellrestrictperiods = Новый Массив;
	 
	 	Если Не Заполнить = 0 Тогда
		
		Tsellrestrictperiods = Новый Структура;
		Tsellrestrictperiods.Вставить("dateend","0001-01-01"); ///Дата!!!
		Tsellrestrictperiods.Вставить("datestart","0001-01-01");
		Tsellrestrictperiods.Вставить("dayend",0);
		Tsellrestrictperiods.Вставить("daystartdaystart",0);
		Tsellrestrictperiods.Вставить("datimeendyend","00:00:00"); /// Время
		Tsellrestrictperiods.Вставить("timestart","00:00:00"); /// Время
				//Дополнить заполнение массива
		 sellrestrictperiods.Добавить(Tsellrestrictperiods);
	КонецЕсли; 

	 
	 Возврат sellrestrictperiods;

	
КонецФункции // ()


Функция Сформироватьoptions(тСтрока)
	
	inventitemoptions = Новый Структура;
	inventitemoptions.Вставить("tobacco",0); // Является ли товар табачной продукцией
	inventitemoptions.Вставить("disablebackinsale",0); // Запретить возврат товара в чеке продажи
	inventitemoptions.Вставить("disableinventshow",0); // Не показывать товар в списках
	inventitemoptions.Вставить("disableinventsale",0); // Запретить продажу товара
	inventitemoptions.Вставить("disableinventback",0); // Запретить возврат товара
	inventitemoptions.Вставить("requiredepartmentmanual",0); // Требовать указание отдела вручную
	inventitemoptions.Вставить("enabledepartmentmanual",1); // Разрешить ввод отдела вручную
	inventitemoptions.Вставить("enablebarcodemanual",1); // Разрешить ввод штрих-кода вручную
	inventitemoptions.Вставить("enablebarcodescanner",1); // Разрешить ввод штрих-кода сканером
	inventitemoptions.Вставить("visualverify",0); // Визуальный контроль товара
	inventitemoptions.Вставить("ageverify",1); // Контроль возраста покупателя
	inventitemoptions.Вставить("requiresalerestrict",0); // Проверять ограничения продаж для товара
	inventitemoptions.Вставить("egaisverify",0); // Проверять алкогольный товар с акцизной маркой в ЕГАИС
	inventitemoptions.Вставить("prepackaged",0); // Является ли товар расфасованным
	inventitemoptions.Вставить("nopdfegaisverify",0); // Проверять алкогольный товар без акцизной марки в ЕГАИС
	inventitemoptions.Вставить("alcoset",0); // Является ли товар алкогольным набором
	inventitemoptions.Вставить("freesale",0); // Является ли товар товаром по свободной цене
	inventitemoptions.Вставить("rfidverify",0); // Является ли товар меховым изделием
	inventitemoptions.Вставить("lowweight",0); // Является ли товар легким товаром
	inventitemoptions.Вставить("weightcontrolbypass",0); // Является ли товар товаром без контроля веса
	inventitemoptions.Вставить("shoes",0); // Является ли товар обувью
	inventitemoptions.Вставить("ignoremarking",0); // Игнорирование признака маркировки
	
	options = Новый Структура;
	options.Вставить("inventitemoptions",inventitemoptions);
	
	//Если (тСтрока.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	//		ИЛИ (тСтрока.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
	//		Тогда //ИЛИ (тСтрока.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Никотин)
	//	options.inventitemoptions.tobacco = 1;
	//Иначе
	//	options.inventitemoptions.tobacco = 0;
	//КонецЕсли;	
	
	СтруктураТовара =  ТоварЯвляетсяТабаком(тСтрока);
	options.inventitemoptions.tobacco = СтруктураТовара.Табак;

	
	Данные = "";
	priceoptions = Сформироватьpriceoptions(тСтрока,1,Данные);
	options.Вставить("priceoptions",priceoptions);
	
	quantityoptions = Сформироватьquantityoptions(тСтрока,0,Данные); 
	options.Вставить("quantityoptions",quantityoptions);
	
	Возврат options;
	
КонецФункции // ()


Функция Сформироватьquantityoptions(тСтрока,Заполнить,Данные)

	 quantityoptions = Новый Структура;
	 Если Не Заполнить = 0 Тогда
		
		
		quantityoptions.Вставить("enabledefaultquantity",1);
		quantityoptions.Вставить("enablequantitylimit",0);
		quantityoptions.Вставить("quantitylimit",0);
		quantityoptions.Вставить("enablequantityscales",1);
		quantityoptions.Вставить("enablequantitybarcode",1);
		
		quantityoptions.Вставить("enablequantitymanual",1);
		quantityoptions.Вставить("requirequantitymanual",0);
		quantityoptions.Вставить("requirequantitybarcode",0);
		quantityoptions.Вставить("requirequantityscales",0);
		
		quantityoptions.Вставить("enabledocumentquantitylimit",0);
		quantityoptions.Вставить("autogetquantityfromscales",0);
		quantityoptions.Вставить("documentquantlimit",0);

		
	КонецЕсли; 

	 
	 Возврат quantityoptions;

	
 КонецФункции // ()
 
 
 Функция Сформироватьpriceoptions(тСтрока,Заполнить,Данные)
	 
	 priceoptions = Новый Структура;
	 
	 Если Не Заполнить = 0 Тогда
		 
		 
		 priceoptions.Вставить("enablepricemanual",Число(Объект.РазрешеноИзменеятьЦеныВручную));   // Разрешить ввод цены вручную  
		 priceoptions.Вставить("requirepricemanual",0);
		 priceoptions.Вставить("requireselectprice",0);
		 priceoptions.Вставить("requiredeferredprice",0);
		 //Если тСтрока.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		 //    priceoptions.Вставить("enableexcisemarkprice",Число(Объект.ИспользоватьЦенуТабакаИзККода)); // Использовать цену табачной продукции из кода маркировки				
		 //Иначе 
		 //    priceoptions.Вставить("enableexcisemarkprice",0); // НЕ Использовать цену табачной продукции из кода маркировки				
		 //КонецЕсли;	
		 
		 СтруктураТовара =  ТоварЯвляетсяТабаком(тСтрока);
		 priceoptions.Вставить("enableexcisemarkprice",СтруктураТовара.УстанавливатьЦену);
		 
	 КонецЕсли; 
	 
	 Возврат priceoptions;
	 
	 
 КонецФункции // ()


Функция Сформироватьinventitemoptions()

	 inventitemoptions = Новый Структура;
	 
	 Возврат inventitemoptions;

	
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ТоварЯвляетсяТабаком(м_Товар)
	
	
	ТипТовара = Новый Структура("Табак,УстанавливатьЦену", 0,0);
	
	// Если это любая табачная продукция, то устанавливаем признак  - табак
	Если (м_Товар.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
		ИЛИ (м_Товар.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
		Тогда //ИЛИ (м_Товар.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Никотин)
		ТипТовара.Вставить("Табак", 1);
	Иначе
		ТипТовара.Вставить("Табак", 0);
	КонецЕсли;
	
	// Если это альтернативный табак или никотинсодержащая продукция, то цену из куаркода не используем
	Если м_Товар.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		ТипТовара.Вставить("УстанавливатьЦену",Число(Объект.ИспользоватьЦенуТабакаИзККода)); // Использовать цену табачной продукции из кода маркировки				
	Иначе
		ТипТовара.Вставить("УстанавливатьЦену", 0);// НЕ Использовать цену табачной продукции из кода маркировки	
	КонецЕсли;
	
	
	Возврат ТипТовара;
КонецФункции // ТоварЯвляетсяТабаком()
