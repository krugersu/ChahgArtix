
&НаСервере
Процедура ЗагрузитьКассовыеСменыНаСервере()
	
	НеФормироватьЧеки = Истина;
	
	ДатаПоследнегоОпроса = ПолучитьЗафиксироватьДатуОпроса();
	
	// Поллучаем список кассовых смен в кассовом сервере, что бы убедиться что с момента последнего опроса кассового
	// сервера не было открытия и закрытия смены
	// TODO определить где хранить время начала последнего опроса
	
	//1. В начале отрабатываем изменения по текущим сменам, который уже есть в 1С
	
	// Получаем список всех не закрытых смен в 1С, и закрытых но отсутствующих в 1С, в норме все смены кроме текущего и прошлого дня должны
	// быть закрыты
	////СписокНеЗакрытыхКассовыхСмен = ПолучитьСписокНеЗакрытыхКассовыхСменВ1С();
	// В результате имем список открытых смен и закрытых, которые отсутствуют в 1С
	
	//СоздатьИзменитьЗаписьОКассовойСмене(КассаАртикс,НомерСмены,Статус)

	СписокНеЗакрытыхКассовыхСмен = ПолучитьСписокНеЗакрытыхКассовыхСменВ1С(ДатаПоследнегоОпроса);
	
	СписокИДЧековВСмене = Новый СписокЗначений;
	
	// Для каждой не закрытой смены делаем запрос к кассовому серверу и анализируем закрылась ли смена, если
	// да , то закрываем смену в 1С (возможно в будущем переделать запрос, что бы получать все смены одним запросом
	// используя в качестве параметра список номеров смен - СписокНеЗакрытыхКассовыхСмен)
	Для Каждого тСтрока из СписокНеЗакрытыхКассовыхСмен Цикл
		
		// Запрос на получение кассовой смены по номеру
		//РезультатКассоваяСмена = КассоаяСменаПоНомеру(Число(тСтрока.Значение));
		// Отбираем только закрытые смены в кассовом сервере, что бы видеть закрылась смена или нет
		
		РезультатКассоваяСмена = КассоаяСменаПоНомеру(Число(тСтрока.Номер));
		
		Если НЕ РезультатКассоваяСмена.Количество() = 0 Тогда
			// Если смена закрыта в кассовом сервере, то закрываем ее в 1С
			
			Если НЕ тСтрока.Статус Тогда
				текКассоваяСмена = ЗакрытьКассовуюСмену(РезультатКассоваяСмена,РезультатКассоваяСмена);
				
				ЗаписьЖурналаРегистрации("Загрузка из Artix", УровеньЖурналаРегистрации.Информация,,,"Закрытие кассовой смены");

				
				//!!!!!!!!!!!!!!!! Здесь уже должен быть список нужным номеров смен уже созданых и закрытых в 1С!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				// Попытка создания чеков при закрытии смены
				// Проверяем если вернулась ссылка на кассовую смену, то начинаем процедуру создания чеков
				Если текКассоваяСмена <> Неопределено Тогда
					// Формируем сразу ОРП чеки не загружаем
					Если  НеФормироватьЧеки Тогда
						
						СписокИДЧековВСмене.Очистить();
						ТаблицаШапкиЧековПродажи = ЗагрузитьЧекиНаСервере(Число(текКассоваяСмена.Номер),РезультатКассоваяСмена[0].cashcode,1);
						ТаблицаШапкиЧековВозвраты = ЗагрузитьЧекиНаСервере(Число(текКассоваяСмена.Номер),РезультатКассоваяСмена[0].cashcode,25);
						
						СписокИДЧековВСмене.ЗагрузитьЗначения(ТаблицаШапкиЧековПродажи.ВыгрузитьКолонку("documentid"));
						ТаблицаТЧТовары = ЗагрузитьТЧТовары(СписокИДЧековВСмене);
						СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode,Истина);
						
						Если НЕ ТаблицаШапкиЧековВозвраты.Количество() = 0 Тогда
							СписокИДЧековВСмене.Очистить();
							СписокИДЧековВСмене.ЗагрузитьЗначения(ТаблицаШапкиЧековВозвраты.ВыгрузитьКолонку("documentid"));
							ТаблицаТЧТовары = ЗагрузитьТЧТоварыВозврат(СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode);
							СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode,Ложь);
						КонецЕсли;
						
					Иначе // Загружаем чеки и потом на их основе формируем ОРП 
						//СписокИДЧековВСмене.Очистить();
						//ТаблицаШапкиЧеков = ЗагрузитьЧекиНаСервере(текКассоваяСмена.НомерСменыККТ,РезультатКассоваяСмена[0].cashcode,1);
						//СписокИДЧековВСмене.ЗагрузитьЗначения(ТаблицаШапкиЧеков.ВыгрузитьКолонку("documentid"));
						//ТаблицаТЧТовары = ЗагрузитьТЧТовары(СписокИДЧековВСмене);
						//СоздатьЧеки(ТаблицаШапкиЧеков,текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла;
	
	// 2. Обрабатываем смены, которые были созданы и закрыти с момента последнего подключения
	
	Для Каждого тСтрока из СписокНеЗакрытыхКассовыхСмен Цикл
		
		// Запрос на получение кассовой смены по номеру
		//РезультатКассоваяСмена = КассоаяСменаПоНомеру(Число(тСтрока.Значение));
		// Отьираем только закрытые смены в кассовом сервере, что бы видеть закрылась смена или нет
		
		РезультатКассоваяСмена = КассоаяСменаПоНомеру(Число(тСтрока.Номер));
		
		Если НЕ РезультатКассоваяСмена.Количество() = 0 Тогда
			// Если смена закрыта в кассовом сервере, то закрываем ее в 1С
			
			Если  тСтрока.Статус Тогда
				
				// Открыть и закрыть кассовую смену
				// Функция по созданию и открытию документов Кассовая смена в 1С
				МассивКассовыеСмены = ОткрытьКассовуюСмену(РезультатКассоваяСмена);
				
				Для каждого текСмена Из МассивКассовыеСмены Цикл
					
					текКассоваяСмена = ЗакрытьКассовуюСмену(текСмена,РезультатКассоваяСмена);	
					
				КонецЦикла; 
				
				
				
				//!!!!!!!!!!!!!!!! Здесь уже должен быть список нужным номеров смен уже созданых и закрытых в 1С!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				// Попытка создания чеков при закрытии смены
				// Проверяем если вернулась ссылка на кассовую смену, то начинаем процедуру создания чеков
				Если текКассоваяСмена <> Неопределено Тогда
					// Формируем сразу ОРП чеки не загружаем
					Если  НеФормироватьЧеки Тогда
						
						СписокИДЧековВСмене.Очистить();
						ТаблицаШапкиЧековПродажи = ЗагрузитьЧекиНаСервере(Число(текКассоваяСмена.Номер),РезультатКассоваяСмена[0].cashcode,1);
						ТаблицаШапкиЧековВозвраты = ЗагрузитьЧекиНаСервере(Число(текКассоваяСмена.Номер),РезультатКассоваяСмена[0].cashcode,25);
						
						СписокИДЧековВСмене.ЗагрузитьЗначения(ТаблицаШапкиЧековПродажи.ВыгрузитьКолонку("documentid"));
						ТаблицаТЧТовары = ЗагрузитьТЧТовары(СписокИДЧековВСмене);
						СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode,Истина);
						
						Если НЕ ТаблицаШапкиЧековВозвраты.Количество() = 0 Тогда
							СписокИДЧековВСмене.Очистить();
							СписокИДЧековВСмене.ЗагрузитьЗначения(ТаблицаШапкиЧековВозвраты.ВыгрузитьКолонку("documentid"));
							ТаблицаТЧТовары = ЗагрузитьТЧТоварыВозврат(СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode);
							СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode,Ложь);
						КонецЕсли;
						
					Иначе // Загружаем чеки и потом на их основе формируем ОРП 
						СписокИДЧековВСмене.Очистить();
						ТаблицаШапкиЧековПродажи = ЗагрузитьЧекиНаСервере(Число(текКассоваяСмена.Номер),РезультатКассоваяСмена[0].cashcode,1);
						ТаблицаШапкиЧековВозвраты = ЗагрузитьЧекиНаСервере(Число(текКассоваяСмена.Номер),РезультатКассоваяСмена[0].cashcode,25);
						
						СписокИДЧековВСмене.ЗагрузитьЗначения(ТаблицаШапкиЧековПродажи.ВыгрузитьКолонку("documentid"));
						ТаблицаТЧТовары = ЗагрузитьТЧТовары(СписокИДЧековВСмене);
						СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode,Истина);
						
						Если НЕ ТаблицаШапкиЧековВозвраты.Количество() = 0 Тогда
							СписокИДЧековВСмене.Очистить();
							СписокИДЧековВСмене.ЗагрузитьЗначения(ТаблицаШапкиЧековВозвраты.ВыгрузитьКолонку("documentid"));
							ТаблицаТЧТовары = ЗагрузитьТЧТоварыВозврат(СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode);
							СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене,РезультатКассоваяСмена[0].cashcode,Ложь);
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла;
	
	
	//3. Затем обрабатываем получение новых смен из кассового сервера 
	// Получаем дату первой незакрытой смены в 1С, для того что бы ограничить период запроса в кассовом сервере
	shiftnum = 14;
	ДатаПервойНеЗакрытойСмены = Неопределено;
	ДатаПервойНеЗакрытойСмены = ПолучитьДатуПервойНеЗакрытойСмены();
	Если ДатаПервойНеЗакрытойСмены = Неопределено Тогда
		ДатаПервойНеЗакрытойСмены = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	// Запрос на получение всех кассовых смен с определенной даты
	Результат =  КассовыеСмены(ДатаПервойНеЗакрытойСмены);
	
	// Функция по созданию и открытию документов Кассовая смена в 1С
	МассивКассовыеСмены = ОткрытьКассовуюСмену(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКассовыеСмены(Команда)
	ЗагрузитьКассовыеСменыНаСервере();
КонецПроцедуры



// Формирует запрос по кассовым сменам
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция КассовыеСмены(ДатаПервойНеЗакрытойСмены)
	
	ЗапросКассовыеСмены = Новый Запрос;
	ЗапросКассовыеСмены.Текст =  
	"ВЫБРАТЬ
	|	workshift.workshiftid КАК workshiftid,
	|	workshift.storeId КАК storeId,
	|	workshift.shiftnum КАК shiftnum,
	|	workshift.cashcode КАК cashcode,
	|	workshift.cashId КАК cashId,
	|	workshift.scode КАК scode,
	|	workshift.time_beg КАК time_beg,
	|	workshift.time_end КАК time_end,
	|	workshift.checknum1 КАК checknum1,
	|	workshift.checknum2 КАК checknum2,
	|	workshift.vb КАК vb,
	|	workshift.vn КАК vn,
	|	workshift.ve КАК ve,
	|	workshift.mode1 КАК mode1,
	|	workshift.mode2 КАК mode2,
	|	workshift.arcpath КАК arcpath,
	|	workshift.shifttype КАК shifttype,
	|	workshift.dateincrement КАК dateincrement,
	|	workshift.shopcode КАК shopcode,
	|	workshift.changed КАК changed,
	|	workshift.sumSale КАК sumSale,
	|	workshift.sumGain КАК sumGain,
	|	workshift.sumDrawer КАК sumDrawer,
	|	workshift.version КАК version,
	|	workshift.postype КАК postype,
	|	workshift.revision КАК revision,
	|	workshift.firstchecktime КАК firstchecktime,
	|	workshift.update_time КАК update_time,
	|	workshift.sumsalecash КАК sumsalecash,
	|	workshift.sumsalenoncash КАК sumsalenoncash,
	|	workshift.sumsaleother КАК sumsaleother,
	|	workshift.sumgaincash КАК sumgaincash,
	|	workshift.sumgainnoncash КАК sumgainnoncash,
	|	workshift.sumrefund КАК sumrefund,
	|	workshift.sumrefundcash КАК sumrefundcash,
	|	workshift.sumrefundnoncash КАК sumrefundnoncash,
	|	workshift.countsale КАК countsale,
	|	workshift.countrefund КАК countrefund
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.workshift КАК workshift
	|ГДЕ
	//	|	workshift.shiftnum = &shiftnum
	|	 workshift.time_beg > &time_beg";
	
	ЗапросКассовыеСмены.УстановитьПараметр("time_beg", ДатаПервойНеЗакрытойСмены);
	Результат = ЗапросКассовыеСмены.Выполнить().Выгрузить();
	
	
	
	Возврат Результат;
	
КонецФункции // ВернутьТекстЗапросаКассовыеСмены()


// Формирует запрос по кассовой смене по номеру
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция КассоаяСменаПоНомеру(тНомер)
	
	ЗапросКассоваяСменаПоНомеру = Новый Запрос;
	ЗапросКассоваяСменаПоНомеру.Текст =  
	"ВЫБРАТЬ
	|	workshift.workshiftid КАК workshiftid,
	|	workshift.storeId КАК storeId,
	|	workshift.shiftnum КАК shiftnum,
	|	workshift.cashcode КАК cashcode,
	|	workshift.cashId КАК cashId,
	|	workshift.scode КАК scode,
	|	workshift.time_beg КАК time_beg,
	|	workshift.time_end КАК time_end,
	|	workshift.checknum1 КАК checknum1,
	|	workshift.checknum2 КАК checknum2,
	|	workshift.vb КАК vb,
	|	workshift.vn КАК vn,
	|	workshift.ve КАК ve,
	|	workshift.mode1 КАК mode1,
	|	workshift.mode2 КАК mode2,
	|	workshift.arcpath КАК arcpath,
	|	workshift.shifttype КАК shifttype,
	|	workshift.dateincrement КАК dateincrement,
	|	workshift.shopcode КАК shopcode,
	|	workshift.changed КАК changed,
	|	workshift.sumSale КАК sumSale,
	|	workshift.sumGain КАК sumGain,
	|	workshift.sumDrawer КАК sumDrawer,
	|	workshift.version КАК version,
	|	workshift.postype КАК postype,
	|	workshift.revision КАК revision,
	|	workshift.firstchecktime КАК firstchecktime,
	|	workshift.update_time КАК update_time,
	|	workshift.sumsalecash КАК sumsalecash,
	|	workshift.sumsalenoncash КАК sumsalenoncash,
	|	workshift.sumsaleother КАК sumsaleother,
	|	workshift.sumgaincash КАК sumgaincash,
	|	workshift.sumgainnoncash КАК sumgainnoncash,
	|	workshift.sumrefund КАК sumrefund,
	|	workshift.sumrefundcash КАК sumrefundcash,
	|	workshift.sumrefundnoncash КАК sumrefundnoncash,
	|	workshift.countsale КАК countsale,
	|	workshift.countrefund КАК countrefund
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.workshift КАК workshift
	|ГДЕ
	|	workshift.workshiftid = &workshiftid
	|	И НЕ workshift.time_end ЕСТЬ NULL";
	
	ЗапросКассоваяСменаПоНомеру.УстановитьПараметр("workshiftid", тНомер);	
	РезультатКассоваяСмена = ЗапросКассоваяСменаПоНомеру.Выполнить().Выгрузить();
	
	
	
	Возврат РезультатКассоваяСмена;
	
КонецФункции // 



Функция ОткрытьКассовуюСмену(Результат)
	
	СсылкаНаКассовуюСмену = Документы.КассоваяСмена.ПустаяСсылка();
	
	МассивДокументовКассоваяСмена = Новый Массив; 
	
	Для каждого тСтрока Из Результат Цикл
		СтатусКассовойСмены = ?(тСтрока.time_end <> Null,Перечисления.СтатусыКассовойСмены.Закрыта,Перечисления.СтатусыКассовойСмены.Открыта);
		//Если НЕ ПроверитьНаличиеКассовойСмены(тСтрока.shiftnum, тСтрока.cashcode,тСтрока.shopcode) Тогда
		Если НЕ ПроверитьНаличиеКассовойСмены(тСтрока.workshiftid, тСтрока.cashcode,тСтрока.shopcode) Тогда
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	крю_СоответствиеККМ.КассаКомплексная КАК КассаКомплексная,
		|	крю_СоответствиеККМ.КассаАртикс КАК КассаАртикс,
		|	крю_СоответствиеККМ.МагазинКомплексная КАК МагазинКомплексная,
		|	крю_СоответствиеККМ.ОрганизацияКомплексная КАК ОрганизацияКомплексная,
		|	крю_СоответствиеККМ.ОрганизацияЕГАИСКомплексная КАК ОрганизацияЕГАИСКомплексная,
		|	крю_СоответствиеККМ.ТерминалЭквайринг КАК ТерминалЭквайринг,
		|	крю_СоответствиеККМ.ФискальноеУстройство КАК ФискальноеУстройство
		|ИЗ
		|	РегистрСведений.крю_СоответствиеККМ КАК крю_СоответствиеККМ
		|ГДЕ
		|	крю_СоответствиеККМ.КассаАртикс = &КассаАртикс";
	
	Запрос.УстановитьПараметр("КассаАртикс", тСтрока.cashcode);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
			
			СсылкаНаКассовуюСмену = Документы.КассоваяСмена.СоздатьДокумент();
			СсылкаНаКассовуюСмену.Номер = тСтрока.workshiftid;
			СсылкаНаКассовуюСмену.Дата = тСтрока.time_beg;
			СсылкаНаКассовуюСмену.ДатаСменыККТ  = тСтрока.time_beg;
			СсылкаНаКассовуюСмену.НомерСменыККТ = тСтрока.shiftnum;
			СсылкаНаКассовуюСмену.НачалоКассовойСмены = тСтрока.time_beg;
			СсылкаНаКассовуюСмену.Статус = СтатусКассовойСмены;
			СсылкаНаКассовуюСмену.ФискальноеУстройство = ВыборкаДетальныеЗаписи.ФискальноеУстройство;
			СсылкаНаКассовуюСмену.КассаККМ = ВыборкаДетальныеЗаписи.КассаКомплексная;
			СсылкаНаКассовуюСмену.Организация = ВыборкаДетальныеЗаписи.ОрганизацияКомплексная;
			СсылкаНаКассовуюСмену.КоличествоЧеков = тСтрока.countsale + тСтрока.countrefund;
			СсылкаНаКассовуюСмену.ОкончаниеКассовойСмены = тСтрока.time_end;  // Перенести в закрытие смены
			
			Попытка
				СсылкаНаКассовуюСмену.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
			МассивДокументовКассоваяСмена.Добавить(СсылкаНаКассовуюСмену);
		КонецЕсли;
	КонецЦикла;  
	
	//Возврат СсылкаНаКассовуюСмену;
	Возврат МассивДокументовКассоваяСмена;
	
КонецФункции	


// Проверяет существует ли документ кассовая сманеа по этой кассе за текущее время
Функция ПроверитьНаличиеКассовойСмены(НомерСмены,Касса,Магазин)
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КассоваяСмена.Ссылка КАК Ссылка
	//|ИЗ
	//|	Документ.КассоваяСмена КАК КассоваяСмена
	//|ГДЕ
	//|	КассоваяСмена.НомерСменыККТ = &НомерСменыККТ";
	//
	//Запрос.УстановитьПараметр("НомерСменыККТ", НомерСмены);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Возврат ВыборкаДетальныеЗаписи.Следующий();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерСмены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();	
	
	
	
	
КонецФункции	


// Возвращает дату первой незакрытой смены в 1С, для ограничения выборки из Кассового сервера
//
// Возвращаемое значение:
//   Дата или Неопределено - Дата первого незакрытого документа Кассовая смена или НЕопределено если таковой не найдено
Функция ПолучитьДатуПервойНеЗакрытойСмены()
	
	Статус = Перечисления.СтатусыКассовойСмены.Открыта;
	РезультатДата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка,
	|	КассоваяСмена.Дата КАК Дата
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		РезультатДата = ВыборкаДетальныеЗаписи.Дата;
	КонецЕсли;;
	
	Возврат РезультатДата;
	
КонецФункции // ПолучитьДатуПервойНеЗакрытойСмены()


// Возвращает список содержащий ссылки на все незакрытые кассовые смены в 1С
// И смены из кассового сервера, которые были открыты и закрыты с момента последнего обращения
// Предпологается, что данные по закрытым сменам не изменны и не рубуют корректировки
//
// Возвращаемое значение:
//   СписокЗначений  - Список значений содержащий ссылки на не закрытые документы кассовой смены
//
Функция ПолучитьСписокНеЗакрытыхКассовыхСменВ1С(ДатаПоследнегоОпроса)
	
	
	СписокНомеровСменВ1С = Новый СписокЗначений;
	СписокКассовыхСмен = Новый СписокЗначений;
	Статус = Перечисления.СтатусыКассовойСмены.Открыта;
	
	// Список смен в 1С начина с даты последнего опроса,  выгружаем номера документов в список значений
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Номер КАК Номер
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Дата >= &Дата";
	
	Запрос.УстановитьПараметр("Дата", ДатаПоследнегоОпроса);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СписокНомеровСменВ1С.ЗагрузитьЗначения(РезультатЗапроса.ВыгрузитьКолонку("Номер"));
	
	
	// Список открытых смен в 1с
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Номер КАК Номер,
	|	ЛОЖЬ КАК Статус
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Статус = &Статус
	
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	
	СписокКассовыхСмен = Запрос.Выполнить().Выгрузить();
	
	
	// Список смен в кассовом сервере с момента последнего обращения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	workshift.workshiftid КАК Номер,
	|	Истина КАК Статус
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.workshift КАК workshift
	|ГДЕ
	|	workshift.time_beg > &time_beg
	| И НЕ workshift.workshiftid В (&workshiftid)"	;
	
	Запрос.УстановитьПараметр("time_beg", ДатаПоследнегоОпроса);
	Запрос.УстановитьПараметр("workshiftid", СписокНомеровСменВ1С);
	
	СменыКассовыйСервер = Запрос.Выполнить().Выгрузить();
	
	// Здесь написать запрос, что бы выбрать только отсутствующие в 1С смены
	
	
	Для Каждого СтрокаТаблицыИсточник Из СменыКассовыйСервер Цикл
		
		//ЗаполнитьЗначенияСвойств(СписокКассовыхСмен.Добавить(), СтрокаТаблицыИсточник);
		
		нСтрока = СписокКассовыхСмен.Добавить();
		нСтрока.Номер = СтрокаТаблицыИсточник.Номер;
		нСтрока.Статус = СтрокаТаблицыИсточник.Статус;
	КонецЦикла;
	// В результате имем список открытых смен и закрытых, которые отсутствуют в 1С
	Возврат СписокКассовыхСмен;
	
КонецФункции // ПолучитьСписокНеЗакрытыхКассовыхСменВ1С()

//Функция ПолучитьСписокНеЗакрытыхКассовыхСменВ1С(ДатаПоследнегоОпроса)
//	
//	
//	СписокКассовыхСмен = Новый СписокЗначений;
//	Статус = Перечисления.СтатусыКассовойСмены.Открыта;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	//|	КассоваяСмена.НомерСменыККТ КАК НомерСменыККТ
//	|	КассоваяСмена.Номер КАК Номер
//	
//	|ИЗ
//	|	Документ.КассоваяСмена КАК КассоваяСмена
//	|ГДЕ
//	|	КассоваяСмена.Статус = &Статус
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	КассоваяСмена.Дата";
//	
//	Запрос.УстановитьПараметр("Статус", Статус);
//	
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	
//	//СписокКассовыхСмен.ЗагрузитьЗначения(РезультатЗапроса.ВыгрузитьКолонку("НомерСменыККТ"));
//	СписокКассовыхСмен.ЗагрузитьЗначения(РезультатЗапроса.ВыгрузитьКолонку("Номер"));
//	
//	
//	Возврат СписокКассовыхСмен;
//	
//КонецФункции // ПолучитьСписокНеЗакрытыхКассовыхСменВ1С()


// В функции происходит попытка закрытия кассовой смены, если документ не найден , то возвращается Неопределено
&НаСервере
Функция ЗакрытьКассовуюСмену(текСмена,РезультатКассоваяСмена);
	
	Результат = Неопределено;
	
	Если ТипЗнч(текСмена) = Тип("ДокументОбъект.КассоваяСмена") Тогда
		
		ТекущаяКассоваяСмена = текСмена.Ссылка;
		
	Иначе 
		//	ТекущаяКассоваяСмена = Документы.КассоваяСмена.НайтиПоРеквизиту("НомерСменыККТ",РезультатКассоваяСмена[0].shiftnum);
		ТекущаяКассоваяСмена = Документы.КассоваяСмена.НайтиПоНомеру(РезультатКассоваяСмена[0].workshiftid);
	КонецЕсли; 
	
	
	Если НЕ ТекущаяКассоваяСмена = Документы.КассоваяСмена.ПустаяСсылка() Тогда
		ОбектТекущаяКассоваяСмена = ТекущаяКассоваяСмена.ПолучитьОбъект();
		ОбектТекущаяКассоваяСмена.ОкончаниеКассовойСмены = РезультатКассоваяСмена[0].time_end;
		// TODO Разобраться с реквизитами количества чеков
		// countrefund	int(11)	Количество чеков возврата
		//	countsale	int(11)	Количество чеков продажи
		// КоличествоФД   что сюда?
		// КоличествоЧеков что сюда?	
		// TODO заполнять кассу и организацию
		ОбектТекущаяКассоваяСмена.КоличествоЧеков = РезультатКассоваяСмена[0].countsale;
		ОбектТекущаяКассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта;
		Попытка
			ОбектТекущаяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			Результат = ТекущаяКассоваяСмена;  
		Исключение
			
		КонецПопытки;
		
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ЗагрузитьЧекиНаСервере(тНомерСмены,тНомерКассы,тТипДокумента)
	
	// Получить чеки  по номеру смены и коду кассы
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	document.documentid КАК documentid,
	|	document.cashcode КАК cashcode,
	|	document.workshiftid КАК workshiftid,
	|	document.checknum КАК checknum,
	|	document.doctype КАК doctype,
	|	document.dept КАК dept,
	|	document.scode КАК scode,
	|	document.time_beg КАК time_beg,
	|	document.time_end КАК time_end,
	|	document.vbrate КАК vbrate,
	|	document.verate КАК verate,
	|	document.sum1 КАК sum1,
	|	document.sum2 КАК sum2,
	|	document.sum2m КАК sum2m,
	|	document.summode КАК summode,
	|	document.sumtype КАК sumtype,
	|	document.disc_perc КАК disc_perc,
	|	document.disc_abs КАК disc_abs,
	|	document.sumb КАК sumb,
	|	document.sumn КАК sumn,
	|	document.sume КАК sume,
	|	document.vatsum КАК vatsum,
	|	document.docnum КАК docnum,
	|	document.c_link КАК c_link,
	|	document.closed КАК closed,
	|	document.opid КАК opid,
	|	document.dateincrement КАК dateincrement,
	|	document.buttonid КАК buttonid,
	|	document.linkeddocumentid КАК linkeddocumentid,
	|	document.departmentid КАК departmentid,
	|	document.clientitemid КАК clientitemid,
	|	document.changed КАК changed,
	|	document.rtext КАК rtext,
	|	document.sumcash КАК sumcash,
	|	document.identifier КАК identifier,
	|	document.url_egais КАК url_egais,
	|	document.digital_signature_egais КАК digital_signature_egais,
	|	document.update_time КАК update_time,
	|	document.actorcode КАК actorcode,
	|	document.moneyouttype КАК moneyouttype,
	|	document.nopdfUrlEgais КАК nopdfUrlEgais,
	|	document.nopdfDigitalSignatureEgais КАК nopdfDigitalSignatureEgais,
	|	document.customeraddress КАК customeraddress,
	|	document.closewithoutprint КАК closewithoutprint,
	|	document.sourceidentifier КАК sourceidentifier,
	|	document.frdocnum КАК frdocnum,
	|	document.frdoccopy КАК frdoccopy,
	|	document.backreason КАК backreason,
	|	document.fiscalidentifier КАК fiscalidentifier,
	|	document.correctionsourcedocnum КАК correctionsourcedocnum,
	|	document.correctionsourcedocdate КАК correctionsourcedocdate,
	|	document.correctionreason КАК correctionreason,
	|	document.correctiontype КАК correctiontype,
	|	document.waybillprinted КАК waybillprinted,
	|	document.waybillnumber КАК waybillnumber,
	|	document.sumnoncash КАК sumnoncash,
	|	document.sumother КАК sumother
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.document КАК document
	|ГДЕ
	|	document.workshiftid = &workshiftid
	|	И document.cashcode = &cashcode
	|   И document.doctype = &doctype";
	
	// TODO Передавать параметр код кассы в запрос отбора чеков
	Запрос.УстановитьПараметр("cashcode", тНомерКассы);
	Запрос.УстановитьПараметр("workshiftid", тНомерСмены);
	Запрос.УстановитьПараметр("doctype", тТипДокумента);
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции
&НаКлиенте
Процедура ЗагрузитьЧеки(Команда)
	//ЗагрузитьЧекиНаСервере(20,0);
КонецПроцедуры


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьЧеки(ТаблицаШапкиЧеков,текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене);
	
	//  TODO Добавить проверку на то, что чеки уже существует
	
	
	//Построитель = Новый ПостроительЗапроса;
	//Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаТЧТовары);
	//
	//  
	//тОтбор = Построитель.Отбор.Добавить("documentid");
	//тОтбор.ВидСравнения = ВидСравнения.Равно;
	//тОтбор.Значение = НомераДокумента;
	//тОтбор.Использование = Истина;
	//
	//Построитель.Выполнить();
	//Товары = Построитель.Результат.Выгрузить();
	
	Для  Каждого текЧек из ТаблицаШапкиЧеков  Цикл
		Если НЕ текЧек.doctype = 13 Тогда
			
			НовыйЧек = Документы.ЧекККМ.СоздатьДокумент();
			НовыйЧек.Валюта = Справочники.Валюты.НайтиПоКоду("643");
			НовыйЧек.Дата = текЧек.time_beg;
			НовыйЧек.КассоваяСмена = текКассоваяСмена;
			НовыйЧек.Комментарий = "Сформирован обработкой загрузки из Artix - " + ТекущаяДата(); 
			//НовыйЧек.Номер = текЧек.checknum;
			НовыйЧек.Статус = Перечисления.СтатусыЧековККМ.Пробит;
			НовыйЧек.СуммаДокумента = текЧек.sumb;
			// TODO сделать поиск кассККМ
			НовыйЧек.КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("02_№1 (Главная) Гребенщикова 2");	
			// TODO Сделать поиск организации при формировании чекаККМ
			НовыйЧек.Организация = Справочники.Организации.НайтиПоНаименованию("Индивидуальный предприниматель Скрипникова Ольга Александровна");
			// TODO Сделать поиск склада при формировании чекаККМ
			НовыйЧек.Склад = Справочники.Склады.НайтиПоНаименованию("13.SKГребенщикова 2");     
			// TODO Сделать поиск вида цены при формировании чекаККМ
			НовыйЧек.ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("13.SKГребенщикова 2");
			
			Отбор = Новый Структура();
			Отбор.Вставить("documentid",текЧек.documentid);
			
			Товары = ТаблицаТЧТовары.НайтиСтроки(Отбор);
			
			Для каждого тСтрока Из Товары Цикл
				
				нСтрока = НовыйЧек.Товары.Добавить();
				нСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(тСтрока.code);
				нСтрока.Количество = тСтрока.bquant;
				нСтрока.КоличествоУпаковок = тСтрока.bquant;
				
				нСтрока.Цена = тСтрока.price;
				// TODO переделать на вызов стандартной процедуры пересчета строки ТЧ
				
				нСтрока.Сумма = нСтрока.Количество * нСтрока.Цена;
				нСтрока.Продавец = Справочники.Пользователи.НайтиПоНаименованию("Кассир");
				
				// TODO Ставка НДС в строке чека
				нСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
				
			КонецЦикла; 
			
			Попытка
				
				НовыйЧек.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				НовыйЧек.Записать(РежимЗаписиДокумента.Запись);
				
				// TODO Переделать все сообщения об ошибках в записи журнала регистрации
				
				Инфо = ИнформацияОбОшибке();
				Сообщить(НСтр("ru='Описание=';en='Description='") + Инфо.Описание + "'");
				Сообщить(НСтр("ru='ИмяМодуля=';en='ModuleName='") + Инфо.ИмяМодуля + "'");
				Сообщить(НСтр("ru='НомерСтроки=';en='LineNumber='") + Инфо.НомерСтроки + "'");
				Сообщить(НСтр("ru='ИсходнаяСтрока=';en='SourceLine='") + Инфо.ИсходнаяСтрока + "'");
			КонецПопытки;
			// TODO Уточнить про параметр ЦенаВключаетНДС
			//НовыйЧек.ЦенаВключаетНДС = Истина?
		КонецЕсли;
		
	КонецЦикла; 
	
	
	
	
КонецФункции //СоздатьЧеки(ТаблицаШапкиЧеков)




// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТЧТоварыЧнкаККМ()
	
	
	
КонецФункции // ПолучитьТЧТоварыЧнкаККМ()


Функция  ЗагрузитьТЧТовары(СписокИДЧековВСмене);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	goodsitem.goodsitemid КАК goodsitemid,
	|	goodsitem.cashcode КАК cashcode,
	|	goodsitem.documentid КАК documentid,
	|	goodsitem.deptcode КАК deptcode,
	|	goodsitem.scode КАК scode,
	|	goodsitem.ttime КАК ttime,
	|	goodsitem.opcode КАК opcode,
	|	goodsitem.status КАК status,
	|	goodsitem.bcode КАК bcode,
	|	goodsitem.name КАК name,
	|	goodsitem.articul КАК articul,
	|	goodsitem.measure КАК measure,
	|	goodsitem.bcode_mode КАК bcode_mode,
	|	goodsitem.bcode_main КАК bcode_main,
	|	goodsitem.bquant КАК bquant,
	|	goodsitem.bquant_mode КАК bquant_mode,
	|	goodsitem.ost_modif КАК ost_modif,
	|	goodsitem.cquant КАК cquant,
	|	goodsitem.pricetype КАК pricetype,
	|	goodsitem.pricevcode КАК pricevcode,
	|	goodsitem.price КАК price,
	|	goodsitem.minprice КАК minprice,
	|	goodsitem.pricei КАК pricei,
	|	goodsitem.price_mode КАК price_mode,
	|	goodsitem.tindex КАК tindex,
	|	goodsitem.disc_perc КАК disc_perc,
	|	goodsitem.disc_abs КАК disc_abs,
	|	goodsitem.sumi КАК sumi,
	|	goodsitem.sumb КАК sumb,
	|	goodsitem.sumn КАК sumn,
	|	goodsitem.sume КАК sume,
	|	goodsitem.vatcode1 КАК vatcode1,
	|	goodsitem.vatrate1 КАК vatrate1,
	|	goodsitem.vatsum1 КАК vatsum1,
	|	goodsitem.vatcode2 КАК vatcode2,
	|	goodsitem.vatrate2 КАК vatrate2,
	|	goodsitem.vatsum2 КАК vatsum2,
	|	goodsitem.vatcode3 КАК vatcode3,
	|	goodsitem.vatrate3 КАК vatrate3,
	|	goodsitem.vatsum3 КАК vatsum3,
	|	goodsitem.vatcode4 КАК vatcode4,
	|	goodsitem.vatrate4 КАК vatrate4,
	|	goodsitem.vatsum4 КАК vatsum4,
	|	goodsitem.vatcode5 КАК vatcode5,
	|	goodsitem.vatrate5 КАК vatrate5,
	|	goodsitem.vatsum5 КАК vatsum5,
	|	goodsitem.docnum КАК docnum,
	|	goodsitem.c_link КАК c_link,
	|	goodsitem.code КАК code,
	|	goodsitem.posnum КАК posnum,
	|	goodsitem.frnum КАК frnum,
	|	goodsitem.extendetoptions КАК extendetoptions,
	|	goodsitem.opid КАК opid,
	|	goodsitem.buttonid КАК buttonid,
	|	goodsitem.paymentitemid КАК paymentitemid,
	|	goodsitem.departmentid КАК departmentid,
	|	goodsitem.taramode КАК taramode,
	|	goodsitem.taracapacity КАК taracapacity,
	|	goodsitem.extdocid КАК extdocid,
	|	goodsitem.additionaldata КАК additionaldata,
	|	goodsitem.reverseoperation КАК reverseoperation,
	|	goodsitem.update_time КАК update_time,
	|	goodsitem.aspectschemecode КАК aspectschemecode,
	|	goodsitem.aspectvaluesetcode КАК aspectvaluesetcode,
	|	goodsitem.excisemark КАК excisemark,
	|	goodsitem.inn КАК inn,
	|	goodsitem.kpp КАК kpp,
	|	goodsitem.alcoholpercent КАК alcoholpercent,
	|	goodsitem.tags КАК tags,
	|	goodsitem.consultantid КАК consultantid,
	|	goodsitem.alctypecode КАК alctypecode,
	|	goodsitem.alcocode КАК alcocode,
	|	goodsitem.additionalexcisemark КАК additionalexcisemark,
	|	goodsitem.packingprice КАК packingprice,
	|	goodsitem.additionalbarcode КАК additionalbarcode,
	|	goodsitem.paymentobject КАК paymentobject,
	|	goodsitem.paymentmethod КАК paymentmethod,
	|	goodsitem.minretailprice КАК minretailprice,
	|	goodsitem.customsdeclarationnumber КАК customsdeclarationnumber,
	|	goodsitem.manufacturercountrycode КАК manufacturercountrycode,
	|	goodsitem.pricedoctype КАК pricedoctype,
	|	goodsitem.excisetype КАК excisetype,
	|	goodsitem.prepackaged КАК prepackaged,
	|	goodsitem.ntin КАК ntin
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.goodsitem КАК goodsitem
	|ГДЕ
	|	goodsitem.documentid В(&documentid)";
	
	Запрос.УстановитьПараметр("documentid", СписокИДЧековВСмене);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции	


//Функция  ЗагрузитьТЧТоварыВозврат(, КодКассы);
//	
//	КодВозврата = 58;

//	ИДТекущейКассовойСмены = ПолучитьИДТекущейСмены(КодКассы);
//	СписокТоваров = ПолучитьСписокТоваров(СписокИДЧековВСмене,КодВозврата);
//	
//		
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	goodsitem.goodsitemid КАК goodsitemid,
//	|	goodsitem.cashcode КАК cashcode,
//	|	goodsitem.documentid КАК documentid,
//	|	goodsitem.deptcode КАК deptcode,
//	|	goodsitem.scode КАК scode,
//	|	goodsitem.ttime КАК ttime,
//	|	goodsitem.opcode КАК opcode,
//	|	goodsitem.status КАК status,
//	|	goodsitem.bcode КАК bcode,
//	|	goodsitem.name КАК name,
//	|	goodsitem.articul КАК articul,
//	|	goodsitem.measure КАК measure,
//	|	goodsitem.bcode_mode КАК bcode_mode,
//	|	goodsitem.bcode_main КАК bcode_main,
//	|	goodsitem.bquant КАК bquant,
//	|	goodsitem.bquant_mode КАК bquant_mode,
//	|	goodsitem.ost_modif КАК ost_modif,
//	|	goodsitem.cquant КАК cquant,
//	|	goodsitem.pricetype КАК pricetype,
//	|	goodsitem.pricevcode КАК pricevcode,
//	|	goodsitem.price КАК price,
//	|	goodsitem.minprice КАК minprice,
//	|	goodsitem.pricei КАК pricei,
//	|	goodsitem.price_mode КАК price_mode,
//	|	goodsitem.tindex КАК tindex,
//	|	goodsitem.disc_perc КАК disc_perc,
//	|	goodsitem.disc_abs КАК disc_abs,
//	|	goodsitem.sumi КАК sumi,
//	|	goodsitem.sumb КАК sumb,
//	|	goodsitem.sumn КАК sumn,
//	|	goodsitem.sume КАК sume,
//	|	goodsitem.vatcode1 КАК vatcode1,
//	|	goodsitem.vatrate1 КАК vatrate1,
//	|	goodsitem.vatsum1 КАК vatsum1,
//	|	goodsitem.vatcode2 КАК vatcode2,
//	|	goodsitem.vatrate2 КАК vatrate2,
//	|	goodsitem.vatsum2 КАК vatsum2,
//	|	goodsitem.vatcode3 КАК vatcode3,
//	|	goodsitem.vatrate3 КАК vatrate3,
//	|	goodsitem.vatsum3 КАК vatsum3,
//	|	goodsitem.vatcode4 КАК vatcode4,
//	|	goodsitem.vatrate4 КАК vatrate4,
//	|	goodsitem.vatsum4 КАК vatsum4,
//	|	goodsitem.vatcode5 КАК vatcode5,
//	|	goodsitem.vatrate5 КАК vatrate5,
//	|	goodsitem.vatsum5 КАК vatsum5,
//	|	goodsitem.docnum КАК docnum,
//	|	goodsitem.c_link КАК c_link,
//	|	goodsitem.code КАК code,
//	|	goodsitem.posnum КАК posnum,
//	|	goodsitem.frnum КАК frnum,
//	|	goodsitem.extendetoptions КАК extendetoptions,
//	|	goodsitem.opid КАК opid,
//	|	goodsitem.buttonid КАК buttonid,
//	|	goodsitem.paymentitemid КАК paymentitemid,
//	|	goodsitem.departmentid КАК departmentid,
//	|	goodsitem.taramode КАК taramode,
//	|	goodsitem.taracapacity КАК taracapacity,
//	|	goodsitem.extdocid КАК extdocid,
//	|	goodsitem.additionaldata КАК additionaldata,
//	|	goodsitem.reverseoperation КАК reverseoperation,
//	|	goodsitem.update_time КАК update_time,
//	|	goodsitem.aspectschemecode КАК aspectschemecode,
//	|	goodsitem.aspectvaluesetcode КАК aspectvaluesetcode,
//	|	goodsitem.excisemark КАК excisemark,
//	|	goodsitem.inn КАК inn,
//	|	goodsitem.kpp КАК kpp,
//	|	goodsitem.alcoholpercent КАК alcoholpercent,
//	|	goodsitem.tags КАК tags,
//	|	goodsitem.consultantid КАК consultantid,
//	|	goodsitem.alctypecode КАК alctypecode,
//	|	goodsitem.alcocode КАК alcocode,
//	|	goodsitem.additionalexcisemark КАК additionalexcisemark,
//	|	goodsitem.packingprice КАК packingprice,
//	|	goodsitem.additionalbarcode КАК additionalbarcode,
//	|	goodsitem.paymentobject КАК paymentobject,
//	|	goodsitem.paymentmethod КАК paymentmethod,
//	|	goodsitem.minretailprice КАК minretailprice,
//	|	goodsitem.customsdeclarationnumber КАК customsdeclarationnumber,
//	|	goodsitem.manufacturercountrycode КАК manufacturercountrycode,
//	|	goodsitem.pricedoctype КАК pricedoctype,
//	|	goodsitem.excisetype КАК excisetype,
//	|	goodsitem.prepackaged КАК prepackaged,
//	|	goodsitem.ntin КАК ntin
//	|ИЗ
//	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.goodsitem КАК goodsitem
//	|ГДЕ
//	|	goodsitem.documentid В(&documentid)
//	|	И goodsitem.alctypecode = 0
//	|	И goodsitem.alcoholpercent <= 0
//	|	И goodsitem.opcode = &opcode";
//	
//	Запрос.УстановитьПараметр("documentid", СписокИДЧековВСмене);
//	Запрос.УстановитьПараметр("opcode", КодВозврата);
//	
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	
//	Возврат РезультатЗапроса;
//	
//КонецФункции	

Функция  ЗагрузитьТЧТоварыВозврат(СписокИДЧековВСмене, КодКассы);
	
	КодВозврата = 58;
	СписокНомеровДокументов = Новый СписокЗначений;
	СписокИДДокументовТекущейСмены = Новый СписокЗначений;
	// Текущая кассовая смена
	ИДТекущейКассовойСмены = ПолучитьИДТекущейСмены(КодКассы);
	// Список товаров для ТЧ товары
	СписокТоваров = ПолучитьСписокТоваров(СписокИДЧековВСмене,КодВозврата);
	СписокИДДокументов = ПолучитьСписокИДДокументов(ИДТекущейКассовойСмены);
	// Список ИД документов возврата
	СписокНомеровДокументов.ЗагрузитьЗначения(СписокТоваров.ВыгрузитьКолонку("documentid"));
	СписокИДДокументовТекущейСмены.ЗагрузитьЗначения(СписокИДДокументов.ВыгрузитьКолонку("identifier"));
	
	// Вернуть документы по текущей смене
	СписокДокументовВозвратаПоТекущейСмене = ПолучитьСписокДокументовВозвратаПоТекущейСмене(СписокНомеровДокументов,ИДТекущейКассовойСмены,КодВозврата,КодКассы,Истина,СписокИДДокументовТекущейСмены);
	// Вернуть документы по прошлым сменам
	СписокДокументовВозвратаНеПоТекущейСмене = ПолучитьСписокДокументовВозвратаПоТекущейСмене(СписокНомеровДокументов,ИДТекущейКассовойСмены,КодВозврата,КодКассы,Ложь,СписокИДДокументовТекущейСмены);

	// Обработать ТЗ с тр=оварами и убрать строки с алкоголем не из текущей смены
	ТаблицаВозвратаПоТекущейСмене = ПолучитьТоварыДляВозврата(КодВозврата,СписокДокументовВозвратаПоТекущейСмене,Ложь);	
	// Использовать функцию ПолучитьТоварыДляВозврата без Булевого реквизита и полностью получать списки товаров по сменам,
	// а убирать товары уже в   УдалитьЛишниеТоварыВозврата
	ТаблицаВозвратаВозвратаНеПоТекущейСмене = ПолучитьТоварыДляВозврата(КодВозврата,СписокДокументовВозвратаНеПоТекущейСмене,Истина);
	ТаблицаВозвратаВозвратаНеПоТекущейСмене = УдалитьЛишниеТоварыВозврата(ТаблицаВозвратаВозвратаНеПоТекущейСмене);
	 ДополнитьТаблицу(ТаблицаВозвратаПоТекущейСмене,ТаблицаВозвратаВозвратаНеПоТекущейСмене);	
		
	Возврат ТаблицаВозвратаВозвратаНеПоТекущейСмене;
	
КонецФункции	

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УдалитьЛишниеТоварыВозврата(ТаблицаВозвратаВозвратаНеПоТекущейСмене)
	
	СписокНоенклатуры = ТаблицаВозвратаВозвратаНеПоТекущейСмене.ВыгрузитьКолонку("code");
		
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
 Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Номенклатура.Код КАК Код
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код В(&Код)";
	
	Запрос.УстановитьПараметр("Код", СписокНоенклатуры);
	
	тзТовары = Запрос.Выполнить().Выгрузить();
	

	
	// Какие товары исключаем из возврата не по текущей смене
	СписокВидовНоменклатурыДляИсключения = Новый СписокЗначений;
	
	СписокВидовНоменклатурыДляИсключения.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Бутылка"));
	СписокВидовНоменклатурыДляИсключения.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво"));
	СписокВидовНоменклатурыДляИсключения.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво бутылочное"));
	СписокВидовНоменклатурыДляИсключения.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пивной напиток"));
	
	ЗапросН = Новый Запрос;
	ЗапросН.МенеджерВременныхТаблиц = МВТ;
		
//	ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Бутылка");
	ЗапросН.УстановитьПараметр("ТЧ", ТаблицаВозвратаВозвратаНеПоТекущейСмене);
	ЗапросН.УстановитьПараметр("тзТовары", тзТовары);
	ЗапросН.УстановитьПараметр("ВидНоменклатуры", СписокВидовНоменклатурыДляИсключения);


	
	ЗапросН.Текст = "ВЫБРАТЬ
	               |	goodsitem.goodsitemid КАК goodsitemid,
	               |	goodsitem.cashcode КАК cashcode,
	               |	goodsitem.documentid КАК documentid,
	               |	goodsitem.deptcode КАК deptcode,
	               |	goodsitem.scode КАК scode,
	               |	goodsitem.ttime КАК ttime,
	               |	goodsitem.opcode КАК opcode,
	               |	goodsitem.status КАК status,
	               |	goodsitem.bcode КАК bcode,
	               |	goodsitem.name КАК name,
	               |	goodsitem.articul КАК articul,
	               |	goodsitem.measure КАК measure,
	               |	goodsitem.bcode_mode КАК bcode_mode,
	               |	goodsitem.bcode_main КАК bcode_main,
	               |	goodsitem.bquant КАК bquant,
	               |	goodsitem.bquant_mode КАК bquant_mode,
	               |	goodsitem.ost_modif КАК ost_modif,
	               |	goodsitem.cquant КАК cquant,
	               |	goodsitem.pricetype КАК pricetype,
	               |	goodsitem.pricevcode КАК pricevcode,
	               |	goodsitem.price КАК price,
	               |	goodsitem.minprice КАК minprice,
	               |	goodsitem.pricei КАК pricei,
	               |	goodsitem.price_mode КАК price_mode,
	               |	goodsitem.tindex КАК tindex,
	               |	goodsitem.disc_perc КАК disc_perc,
	               |	goodsitem.disc_abs КАК disc_abs,
	               |	goodsitem.sumi КАК sumi,
	               |	goodsitem.sumb КАК sumb,
	               |	goodsitem.sumn КАК sumn,
	               |	goodsitem.sume КАК sume,
	               |	goodsitem.vatcode1 КАК vatcode1,
	               |	goodsitem.vatrate1 КАК vatrate1,
	               |	goodsitem.vatsum1 КАК vatsum1,
	               |	goodsitem.vatcode2 КАК vatcode2,
	               |	goodsitem.vatrate2 КАК vatrate2,
	               |	goodsitem.vatsum2 КАК vatsum2,
	               |	goodsitem.vatcode3 КАК vatcode3,
	               |	goodsitem.vatrate3 КАК vatrate3,
	               |	goodsitem.vatsum3 КАК vatsum3,
	               |	goodsitem.vatcode4 КАК vatcode4,
	               |	goodsitem.vatrate4 КАК vatrate4,
	               |	goodsitem.vatsum4 КАК vatsum4,
	               |	goodsitem.vatcode5 КАК vatcode5,
	               |	goodsitem.vatrate5 КАК vatrate5,
	               |	goodsitem.vatsum5 КАК vatsum5,
	               |	goodsitem.docnum КАК docnum,
	               |	goodsitem.c_link КАК c_link,
	               |	goodsitem.code КАК code,
	               |	goodsitem.posnum КАК posnum,
	               |	goodsitem.frnum КАК frnum,
	               |	goodsitem.extendetoptions КАК extendetoptions,
	               |	goodsitem.opid КАК opid,
	               |	goodsitem.buttonid КАК buttonid,
	               |	goodsitem.paymentitemid КАК paymentitemid,
	               |	goodsitem.departmentid КАК departmentid,
	               |	goodsitem.taramode КАК taramode,
	               |	goodsitem.taracapacity КАК taracapacity,
	               |	goodsitem.extdocid КАК extdocid,
	               |	goodsitem.additionaldata КАК additionaldata,
	               |	goodsitem.reverseoperation КАК reverseoperation,
	               |	goodsitem.update_time КАК update_time,
	               |	goodsitem.aspectschemecode КАК aspectschemecode,
	               |	goodsitem.aspectvaluesetcode КАК aspectvaluesetcode,
	               |	goodsitem.excisemark КАК excisemark,
	               |	goodsitem.inn КАК inn,
	               |	goodsitem.kpp КАК kpp,
	               |	goodsitem.alcoholpercent КАК alcoholpercent,
	               |	goodsitem.tags КАК tags,
	               |	goodsitem.consultantid КАК consultantid,
	               |	goodsitem.alctypecode КАК alctypecode,
	               |	goodsitem.alcocode КАК alcocode,
	               |	goodsitem.additionalexcisemark КАК additionalexcisemark,
	               |	goodsitem.packingprice КАК packingprice,
	               |	goodsitem.additionalbarcode КАК additionalbarcode,
	               |	goodsitem.paymentobject КАК paymentobject,
	               |	goodsitem.paymentmethod КАК paymentmethod,
	               |	goodsitem.minretailprice КАК minretailprice,
	               |	goodsitem.customsdeclarationnumber КАК customsdeclarationnumber,
	               |	goodsitem.manufacturercountrycode КАК manufacturercountrycode,
	               |	goodsitem.pricedoctype КАК pricedoctype,
	               |	goodsitem.excisetype КАК excisetype,
	               |	goodsitem.prepackaged КАК prepackaged,
	               |	goodsitem.ntin КАК ntin
	               |ПОМЕСТИТЬ тзТовары
	               |ИЗ
	               |	&ТЧ КАК goodsitem
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тзТовары.Ссылка КАК Ссылка,
	               |	тзТовары.Код КАК Код,
	               |	тзТовары.ВидНоменклатуры КАК ВидНоменклатуры
	               |ПОМЕСТИТЬ ТаблицаДок
	               |ИЗ
	               |	&тзТовары КАК тзТовары
	               |ГДЕ
	               |	НЕ тзТовары.ВидНоменклатуры В (&ВидНоменклатуры)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тзТовары.goodsitemid КАК goodsitemid,
	               |	тзТовары.cashcode КАК cashcode,
	               |	тзТовары.documentid КАК documentid,
	               |	тзТовары.deptcode КАК deptcode,
	               |	тзТовары.scode КАК scode,
	               |	тзТовары.ttime КАК ttime,
	               |	тзТовары.opcode КАК opcode,
	               |	тзТовары.status КАК status,
	               |	тзТовары.bcode КАК bcode,
	               |	тзТовары.name КАК name,
	               |	тзТовары.articul КАК articul,
	               |	тзТовары.measure КАК measure,
	               |	тзТовары.bcode_mode КАК bcode_mode,
	               |	тзТовары.bcode_main КАК bcode_main,
	               |	тзТовары.bquant КАК bquant,
	               |	тзТовары.bquant_mode КАК bquant_mode,
	               |	тзТовары.ost_modif КАК ost_modif,
	               |	тзТовары.cquant КАК cquant,
	               |	тзТовары.pricetype КАК pricetype,
	               |	тзТовары.pricevcode КАК pricevcode,
	               |	тзТовары.price КАК price,
	               |	тзТовары.minprice КАК minprice,
	               |	тзТовары.pricei КАК pricei,
	               |	тзТовары.price_mode КАК price_mode,
	               |	тзТовары.tindex КАК tindex,
	               |	тзТовары.disc_perc КАК disc_perc,
	               |	тзТовары.disc_abs КАК disc_abs,
	               |	тзТовары.sumi КАК sumi,
	               |	тзТовары.sumb КАК sumb,
	               |	тзТовары.sumn КАК sumn,
	               |	тзТовары.sume КАК sume,
	               |	тзТовары.vatcode1 КАК vatcode1,
	               |	тзТовары.vatrate1 КАК vatrate1,
	               |	тзТовары.vatsum1 КАК vatsum1,
	               |	тзТовары.vatcode2 КАК vatcode2,
	               |	тзТовары.vatrate2 КАК vatrate2,
	               |	тзТовары.vatsum2 КАК vatsum2,
	               |	тзТовары.vatcode3 КАК vatcode3,
	               |	тзТовары.vatrate3 КАК vatrate3,
	               |	тзТовары.vatsum3 КАК vatsum3,
	               |	тзТовары.vatcode4 КАК vatcode4,
	               |	тзТовары.vatrate4 КАК vatrate4,
	               |	тзТовары.vatsum4 КАК vatsum4,
	               |	тзТовары.vatcode5 КАК vatcode5,
	               |	тзТовары.vatrate5 КАК vatrate5,
	               |	тзТовары.vatsum5 КАК vatsum5,
	               |	тзТовары.docnum КАК docnum,
	               |	тзТовары.c_link КАК c_link,
	               |	тзТовары.code КАК code,
	               |	тзТовары.posnum КАК posnum,
	               |	тзТовары.frnum КАК frnum,
	               |	тзТовары.extendetoptions КАК extendetoptions,
	               |	тзТовары.opid КАК opid,
	               |	тзТовары.buttonid КАК buttonid,
	               |	тзТовары.paymentitemid КАК paymentitemid,
	               |	тзТовары.departmentid КАК departmentid,
	               |	тзТовары.taramode КАК taramode,
	               |	тзТовары.taracapacity КАК taracapacity,
	               |	тзТовары.extdocid КАК extdocid,
	               |	тзТовары.additionaldata КАК additionaldata,
	               |	тзТовары.reverseoperation КАК reverseoperation,
	               |	тзТовары.update_time КАК update_time,
	               |	тзТовары.aspectschemecode КАК aspectschemecode,
	               |	тзТовары.aspectvaluesetcode КАК aspectvaluesetcode,
	               |	тзТовары.excisemark КАК excisemark,
	               |	тзТовары.inn КАК inn,
	               |	тзТовары.kpp КАК kpp,
	               |	тзТовары.alcoholpercent КАК alcoholpercent,
	               |	тзТовары.tags КАК tags,
	               |	тзТовары.consultantid КАК consultantid,
	               |	тзТовары.alctypecode КАК alctypecode,
	               |	тзТовары.alcocode КАК alcocode,
	               |	тзТовары.additionalexcisemark КАК additionalexcisemark,
	               |	тзТовары.packingprice КАК packingprice,
	               |	тзТовары.additionalbarcode КАК additionalbarcode,
	               |	тзТовары.paymentobject КАК paymentobject,
	               |	тзТовары.paymentmethod КАК paymentmethod,
	               |	тзТовары.minretailprice КАК minretailprice,
	               |	тзТовары.customsdeclarationnumber КАК customsdeclarationnumber,
	               |	тзТовары.manufacturercountrycode КАК manufacturercountrycode,
	               |	тзТовары.pricedoctype КАК pricedoctype,
	               |	тзТовары.excisetype КАК excisetype,
	               |	тзТовары.prepackaged КАК prepackaged,
	               |	тзТовары.ntin КАК ntin
	               |ИЗ
	               |	тзТовары КАК тзТовары
	               |		ПРАВОЕ СОЕДИНЕНИЕ ТаблицаДок КАК ТаблицаДок
	               |		ПО тзТовары.code = ТаблицаДок.Код";
	
	
	РезультатЗапроса = ЗапросН.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // УдалитьЛишниеТоварыВозврата(ТаблицаВозвратаВозвратаНеПоТекущейСмене)()
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция  ПолучитьИДТекущейСмены(КодКассы)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	workshift.workshiftid КАК workshiftid,
	|	workshift.shiftnum КАК shiftnum,
	|	workshift.cashcode КАК cashcode
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.workshift КАК workshift
	|ГДЕ
	|	workshift.changed = 1
	|	И workshift.cashcode = &cashcode";
	
	Запрос.УстановитьПараметр("cashcode", КодКассы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	Если НЕ ВыборкаДетальныеЗаписи.Количество() = 0  Тогда
		ВыборкаДетальныеЗаписи.Следующий();	
		Результат = Число(ВыборкаДетальныеЗаписи.workshiftid) - 1;
		
	КонецЕсли; 
	
	Возврат Строка(Результат);
	
КонецФункции //  ПолучитьИДТекущейСмены(КодКассы)()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСписокТоваров(СписокИДЧековВСмене,КодВозврата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	goodsitem.goodsitemid КАК goodsitemid,
		|	goodsitem.cashcode КАК cashcode,
		|	goodsitem.documentid КАК documentid,
		|	goodsitem.ttime КАК ttime,
		|	goodsitem.opcode КАК opcode,
		|	goodsitem.bcode КАК bcode,
		|	goodsitem.name КАК name,
		|	goodsitem.articul КАК articul,
		|	goodsitem.bcode_mode КАК bcode_mode,
		|	goodsitem.alcoholpercent КАК alcoholpercent
		|ИЗ
		|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.goodsitem КАК goodsitem
		|ГДЕ
		|	goodsitem.documentid В(&documentid)
		|	И goodsitem.opcode = &opcode";
	
	Запрос.УстановитьПараметр("documentid", СписокИДЧековВСмене);
	Запрос.УстановитьПараметр("opcode", КодВозврата);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	Возврат РезультатЗапроса;
	



КонецФункции // ПолучитьСписокТоваров(СписокИДЧековВСмене,КодВозврата)()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСписокИДДокументов(ИДТекущейКассовойСмены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	document.documentid КАК documentid,
		|	document.workshiftid КАК workshiftid,
		|	document.doctype КАК doctype,
		|	document.identifier КАК identifier
		|ИЗ
		|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.document КАК document
		|ГДЕ
		|	document.workshiftid = &workshiftid";
	
	Запрос.УстановитьПараметр("workshiftid", Число(ИДТекущейКассовойСмены));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	
	
	Возврат РезультатЗапроса;
	



КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСписокДокументовВозвратаПоТекущейСмене(СписокНомеровДокументов,ИДТекущейКассовойСмены,КодВозврата,КодКассы,ТекущаяСмена,СписокИДДокументовТекущейСмены)
	
	Входит = ?(ТекущаяСмена,"","НЕ");
	КодВозврата = 25;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =  СтрШаблон( 
	//"ВЫБРАТЬ
	//|	document.documentid КАК documentid
	//|ИЗ
	//|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.document КАК document
	//|ГДЕ
	//|	document.documentid В(&documentid)
	//|	И %1 document.workshiftid = &workshiftid
	//|	И document.doctype = &doctype
	//|	И document.cashcode = &cashcode",Входит);

	
		Запрос = Новый Запрос;
	Запрос.Текст =  СтрШаблон( 
	"ВЫБРАТЬ
	|	document.documentid КАК documentid
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.document КАК document
	|ГДЕ
	|	document.documentid В(&documentid)
	|	И document.doctype = &doctype
	|	И document.cashcode = &cashcode
	|   И %1 document.sourceidentifier В (&sourceidentifier)",Входит);

	
	Запрос.УстановитьПараметр("cashcode", КодКассы);
	Запрос.УстановитьПараметр("doctype", КодВозврата);
	Запрос.УстановитьПараметр("sourceidentifier", СписокИДДокументовТекущейСмены);
	//Запрос.УстановитьПараметр("workshiftid", Число(ИДТекущейКассовойСмены));
	Запрос.УстановитьПараметр("documentid", СписокНомеровДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("documentid"));
	Возврат Список;
	
	
	
	
КонецФункции // ПолучитьСписокДокументовВозвратаПоТекущейСмене(СписокНомеровДокументов,ИДТекущейКассовойСмены,КодВозврата,КодКассы)()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТоварыДляВозврата(КодВозврата,СписокДокументовВозврата,ТекущаяСмена)

	//Входит = ?(ТекущаяСмена,"И НЕ goodsitem.alctypecode > 0","");
	//Больше = ?(ТекущаяСмена,"И НЕ goodsitem.alcoholpercent > 0","");
	//Тара = ?(ТекущаяСмена,"И НЕ goodsitem.alcoholpercent > 0","");
	//
	КодВозврата = 58;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	goodsitem.goodsitemid КАК goodsitemid,
		|	goodsitem.cashcode КАК cashcode,
		|	goodsitem.documentid КАК documentid,
		|	goodsitem.deptcode КАК deptcode,
		|	goodsitem.scode КАК scode,
		|	goodsitem.ttime КАК ttime,
		|	goodsitem.opcode КАК opcode,
		|	goodsitem.status КАК status,
		|	goodsitem.bcode КАК bcode,
		|	goodsitem.name КАК name,
		|	goodsitem.articul КАК articul,
		|	goodsitem.measure КАК measure,
		|	goodsitem.bcode_mode КАК bcode_mode,
		|	goodsitem.bcode_main КАК bcode_main,
		|	goodsitem.bquant КАК bquant,
		|	goodsitem.bquant_mode КАК bquant_mode,
		|	goodsitem.ost_modif КАК ost_modif,
		|	goodsitem.cquant КАК cquant,
		|	goodsitem.pricetype КАК pricetype,
		|	goodsitem.pricevcode КАК pricevcode,
		|	goodsitem.price КАК price,
		|	goodsitem.minprice КАК minprice,
		|	goodsitem.pricei КАК pricei,
		|	goodsitem.price_mode КАК price_mode,
		|	goodsitem.tindex КАК tindex,
		|	goodsitem.disc_perc КАК disc_perc,
		|	goodsitem.disc_abs КАК disc_abs,
		|	goodsitem.sumi КАК sumi,
		|	goodsitem.sumb КАК sumb,
		|	goodsitem.sumn КАК sumn,
		|	goodsitem.sume КАК sume,
		|	goodsitem.vatcode1 КАК vatcode1,
		|	goodsitem.vatrate1 КАК vatrate1,
		|	goodsitem.vatsum1 КАК vatsum1,
		|	goodsitem.vatcode2 КАК vatcode2,
		|	goodsitem.vatrate2 КАК vatrate2,
		|	goodsitem.vatsum2 КАК vatsum2,
		|	goodsitem.vatcode3 КАК vatcode3,
		|	goodsitem.vatrate3 КАК vatrate3,
		|	goodsitem.vatsum3 КАК vatsum3,
		|	goodsitem.vatcode4 КАК vatcode4,
		|	goodsitem.vatrate4 КАК vatrate4,
		|	goodsitem.vatsum4 КАК vatsum4,
		|	goodsitem.vatcode5 КАК vatcode5,
		|	goodsitem.vatrate5 КАК vatrate5,
		|	goodsitem.vatsum5 КАК vatsum5,
		|	goodsitem.docnum КАК docnum,
		|	goodsitem.c_link КАК c_link,
		|	goodsitem.code КАК code,
		|	goodsitem.posnum КАК posnum,
		|	goodsitem.frnum КАК frnum,
		|	goodsitem.extendetoptions КАК extendetoptions,
		|	goodsitem.opid КАК opid,
		|	goodsitem.buttonid КАК buttonid,
		|	goodsitem.paymentitemid КАК paymentitemid,
		|	goodsitem.departmentid КАК departmentid,
		|	goodsitem.taramode КАК taramode,
		|	goodsitem.taracapacity КАК taracapacity,
		|	goodsitem.extdocid КАК extdocid,
		|	goodsitem.additionaldata КАК additionaldata,
		|	goodsitem.reverseoperation КАК reverseoperation,
		|	goodsitem.update_time КАК update_time,
		|	goodsitem.aspectschemecode КАК aspectschemecode,
		|	goodsitem.aspectvaluesetcode КАК aspectvaluesetcode,
		|	goodsitem.excisemark КАК excisemark,
		|	goodsitem.inn КАК inn,
		|	goodsitem.kpp КАК kpp,
		|	goodsitem.alcoholpercent КАК alcoholpercent,
		|	goodsitem.tags КАК tags,
		|	goodsitem.consultantid КАК consultantid,
		|	goodsitem.alctypecode КАК alctypecode,
		|	goodsitem.alcocode КАК alcocode,
		|	goodsitem.additionalexcisemark КАК additionalexcisemark,
		|	goodsitem.packingprice КАК packingprice,
		|	goodsitem.additionalbarcode КАК additionalbarcode,
		|	goodsitem.paymentobject КАК paymentobject,
		|	goodsitem.paymentmethod КАК paymentmethod,
		|	goodsitem.minretailprice КАК minretailprice,
		|	goodsitem.customsdeclarationnumber КАК customsdeclarationnumber,
		|	goodsitem.manufacturercountrycode КАК manufacturercountrycode,
		|	goodsitem.pricedoctype КАК pricedoctype,
		|	goodsitem.excisetype КАК excisetype,
		|	goodsitem.prepackaged КАК prepackaged,
		|	goodsitem.ntin КАК ntin
		|ИЗ
		|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.goodsitem КАК goodsitem
		|ГДЕ
		|	goodsitem.documentid В(&documentid)
		|	И goodsitem.opcode = &opcode";

	
	Запрос.УстановитьПараметр("documentid", СписокДокументовВозврата);
	Запрос.УстановитьПараметр("opcode", КодВозврата);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;

	

КонецФункции // ПолучитьТоварыДляВозврата(КодВозврата,СписокДокументовВозвратаПоТекущейСмене,Истина)()
 


//Формирует ОРП на основании данных продаж
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары,СписокИДЧековВСмене,КодКассы,ВидДокумента)
	
	
	СсылкаНаНовыйДокумент  = СформироватьШапкуОРП(текКассоваяСмена,ТаблицаТЧТовары,ВидДокумента,КодКассы);
	СсылкаНаНовыйДокумент  = СформироватьТЧТоварыОРП(ТаблицаТЧТовары,СсылкаНаНовыйДокумент);
	СсылкаНаНовыйДокумент  = СформироватьТЧОплатаПлатежнымиКартамиОРП(СсылкаНаНовыйДокумент,СписокИДЧековВСмене,КодКассы);
	
	ПроверитьЗначенияСумм(СсылкаНаНовыйДокумент,текКассоваяСмена);
	
	
	
	
КонецФункции // СформироватьОРП(текКассоваяСмена,ТаблицаТЧТовары)


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПроверитьЗначенияСумм(СсылкаНаНовыйДокумент,текКассоваяСмена)
	
	СуммаБезналичная = 0; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	workshift.workshiftid КАК workshiftid,
	|	workshift.storeId КАК storeId,
	|	workshift.shiftnum КАК shiftnum,
	|	workshift.cashcode КАК cashcode,
	|	workshift.cashId КАК cashId,
	|	workshift.scode КАК scode,
	|	workshift.time_beg КАК time_beg,
	|	workshift.time_end КАК time_end,
	|	workshift.checknum1 КАК checknum1,
	|	workshift.checknum2 КАК checknum2,
	|	workshift.vb КАК vb,
	|	workshift.vn КАК vn,
	|	workshift.ve КАК ve,
	|	workshift.mode1 КАК mode1,
	|	workshift.mode2 КАК mode2,
	|	workshift.arcpath КАК arcpath,
	|	workshift.shifttype КАК shifttype,
	|	workshift.dateincrement КАК dateincrement,
	|	workshift.shopcode КАК shopcode,
	|	workshift.changed КАК changed,
	|	workshift.sumSale КАК sumSale,
	|	workshift.sumGain КАК sumGain,
	|	workshift.sumDrawer КАК sumDrawer,
	|	workshift.version КАК version,
	|	workshift.postype КАК postype,
	|	workshift.revision КАК revision,
	|	workshift.firstchecktime КАК firstchecktime,
	|	workshift.update_time КАК update_time,
	|	workshift.sumsalecash КАК sumsalecash,
	|	workshift.sumsalenoncash КАК sumsalenoncash,
	|	workshift.sumsaleother КАК sumsaleother,
	|	workshift.sumgaincash КАК sumgaincash,
	|	workshift.sumgainnoncash КАК sumgainnoncash,
	|	workshift.sumrefund КАК sumrefund,
	|	workshift.sumrefundcash КАК sumrefundcash,
	|	workshift.sumrefundnoncash КАК sumrefundnoncash,
	|	workshift.countsale КАК countsale,
	|	workshift.countrefund КАК countrefund
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.workshift КАК workshift
	|ГДЕ
	|	workshift.workshiftid = &workshiftid";
	
	Запрос.УстановитьПараметр("workshiftid", текКассоваяСмена.Номер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	докОРП = ?(ТипЗнч(СсылкаНаНовыйДокумент)=Тип("ДокументСсылка.ОтчетОРозничныхПродажах"),Истина,Ложь);
	
	ТипДок = ?(докОРП,"ОтчетОРозничныхПродажах","ОтчетОРозничныхВозвратах");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(  
	"ВЫБРАТЬ
	|	СУММА(%1ОплатаПлатежнымиКартами.Сумма) КАК Сумма
	|ИЗ
	|	Документ.%1.ОплатаПлатежнымиКартами КАК %1ОплатаПлатежнымиКартами
	|ГДЕ
	|	%1ОплатаПлатежнымиКартами.Ссылка = &Ссылка",ТипДок);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаНовыйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СуммаБезналичная = ВыборкаДетальныеЗаписи.Сумма;
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий()  Тогда
		Если докОРП Тогда
			
			СуммаПродажи = (ВыборкаДетальныеЗаписи.sumsalecash
			+ ВыборкаДетальныеЗаписи.sumsalenoncash
			+ ВыборкаДетальныеЗаписи.sumsaleother) =  СсылкаНаНовыйДокумент.СуммаДокумента ;
			
			Если НЕ СуммаПродажи Тогда
				ЗаписьЖурналаРегистрации("Загрузка из Artix", УровеньЖурналаРегистрации.Ошибка,,,
				"Не совпадает сумма ОРП  - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
				
				Сообщить ("Не совпадает сумма ОРП - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
			КонецЕсли; 
			
			// Безнал
			СуммаПродажиБезНаличные =  ВыборкаДетальныеЗаписи.sumsalenoncash =  СуммаБезналичная;
			
			Если НЕ СуммаПродажиБезНаличные Тогда
				ЗаписьЖурналаРегистрации("Загрузка из Artix", УровеньЖурналаРегистрации.Ошибка,,,
				"Не совпадает сумма б/н ОРП - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
				
				Сообщить ("Не совпадает сумма б/н ОРП - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
			КонецЕсли; 
			
		Иначе
			
			СуммаВозвратов = (ВыборкаДетальныеЗаписи.sumrefund = СсылкаНаНовыйДокумент.СуммаДокумента) ;
			
			Если НЕ СуммаВозвратов Тогда
				ЗаписьЖурналаРегистрации("Загрузка из Artix", УровеньЖурналаРегистрации.Ошибка,,,
				"Не совпадает сумма ОРВ  - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
				
				Сообщить ("Не совпадает сумма ОРП - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
			КонецЕсли; 
			
			// Безнал
			СуммаВозвратовБезНаличные =  ВыборкаДетальныеЗаписи.sumrefundnoncash =  СуммаБезналичная;
			
			Если НЕ СуммаВозвратовБезНаличные Тогда
				ЗаписьЖурналаРегистрации("Загрузка из Artix", УровеньЖурналаРегистрации.Ошибка,,,
				"Не совпадает сумма б/н ОРВ - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
				
				Сообщить ("Не совпадает сумма б/н ОРВ  - " + СсылкаНаНовыйДокумент.Номер + " и кассовой смены - " + текКассоваяСмена.Номер);
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьЗначениеСумм()()
 


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьШапкуОРП(текКассоваяСмена,ТаблицаТЧТовары,ВидДокумента,КодКассы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	крю_СоответствиеККМ.КассаКомплексная КАК КассаКомплексная,
		|	крю_СоответствиеККМ.КассаАртикс КАК КассаАртикс,
		|	крю_СоответствиеККМ.МагазинКомплексная КАК МагазинКомплексная,
		|	крю_СоответствиеККМ.ОрганизацияКомплексная КАК ОрганизацияКомплексная,
		|	крю_СоответствиеККМ.ОрганизацияЕГАИСКомплексная КАК ОрганизацияЕГАИСКомплексная,
		|	крю_СоответствиеККМ.ТерминалЭквайринг КАК ТерминалЭквайринг,
		|	крю_СоответствиеККМ.ФискальноеУстройство КАК ФискальноеУстройство
		|ИЗ
		|	РегистрСведений.крю_СоответствиеККМ КАК крю_СоответствиеККМ
		|ГДЕ
		|	крю_СоответствиеККМ.КассаАртикс = &КассаАртикс";
	
	Запрос.УстановитьПараметр("КассаАртикс", КодКассы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();

	
	Если ВидДокумента Тогда
		НовыйДокумент = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Иначе
		НовыйДокумент = Документы.ОтчетОРозничныхВозвратах.СоздатьДокумент();
	КонецЕсли; 
	
	НовыйДокумент.Валюта = Справочники.Валюты.НайтиПоКоду("643");
	НовыйДокумент.Дата = текКассоваяСмена.ОкончаниеКассовойСмены;
	НовыйДокумент.КассоваяСмена = текКассоваяСмена;
	НовыйДокумент.Комментарий = "Сформирован обработкой загрузки из Artix - " + ТекущаяДата(); 
	// TODO Формировать сумму
	НовыйДокумент.СуммаДокумента = 0;
	// TODO сделать поиск кассККМ
	НовыйДокумент.КассаККМ = ВыборкаДетальныеЗаписи.КассаКомплексная;
	// TODO Сделать поиск организации при формировании ОРП
	НовыйДокумент.Организация = ВыборкаДетальныеЗаписи.ОрганизацияКомплексная;
	// TODO Сделать поиск склада при формировании ОРП
	НовыйДокумент.Склад =ВыборкаДетальныеЗаписи.МагазинКомплексная;
	НовыйДокумент.ОрганизацияЕГАИС = ВыборкаДетальныеЗаписи.ОрганизацияЕГАИСКомплексная;
	// TODO Сделать поиск вида цены при формировании ОРП
	НовыйДокумент.ВидЦены = ВыборкаДетальныеЗаписи.МагазинКомплексная.РозничныйВидЦены;
	// TODO переключение НДС в зависимости от настроек организации
	НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	// TODO Добавить проверку на параметр ЦенаВключаетНДС в ОРП
	НовыйДокумент.ЦенаВключаетНДС = Истина;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
		Инфо = ИнформацияОбОшибке();
		Сообщить(НСтр("ru='Описание=';en='Description='") + Инфо.Описание + "'");
		Сообщить(НСтр("ru='ИмяМодуля=';en='ModuleName='") + Инфо.ИмяМодуля + "'");
		Сообщить(НСтр("ru='НомерСтроки=';en='LineNumber='") + Инфо.НомерСтроки + "'");
		Сообщить(НСтр("ru='ИсходнаяСтрока=';en='SourceLine='") + Инфо.ИсходнаяСтрока + "'");
		
		ЗаписьЖурналаРегистрации("Загрузка из Artix", УровеньЖурналаРегистрации.Ошибка,,,
				Инфо.Описание + ", "+ Инфо.ИмяМодуля + ", " + Инфо.НомерСтроки + ", " + Инфо.ИсходнаяСтрока);

		
	КонецПопытки;
	
	Возврат НовыйДокумент.Ссылка;
	
	
КонецФункции // СформироватьШапкуОРП()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьТЧТоварыОРП(ТаблицаТЧТовары,СсылкаНаНовыйДокумент)
	
	// Заполнение табличной части Товары
	НовыйДокумент = СсылкаНаНовыйДокумент.ПолучитьОбъект();
	
	Для каждого тСтрока Из ТаблицаТЧТовары Цикл
		
		нСтрока = НовыйДокумент.Товары.Добавить();
		нСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(тСтрока.code);
		нСтрока.Количество = тСтрока.bquant;
		нСтрока.КоличествоУпаковок = тСтрока.bquant;
		
		нСтрока.Цена = тСтрока.price;
		// TODO переделать на вызов стандартной процедуры пересчета строки ТЧ
		
		//	нСтрока.Сумма = нСтрока.Количество * нСтрока.Цена;
		нСтрока.СуммаРучнойСкидки =  тСтрока.disc_abs;
		нСтрока.ПроцентРучнойСкидки =   тСтрока.disc_perc;
		нСтрока.Сумма = тСтрока.sumb;
		нСтрока.Продавец = Справочники.Пользователи.НайтиПоНаименованию("Кассир");
		нСтрока.Партнер  = Справочники.Партнеры.РозничныйПокупатель;
		// TODO Ставка НДС в строке чека
		нСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		
	КонецЦикла; 
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		// TODO Переделать все сообщения об ошибках в записи журнала регистрации
		Инфо = ИнформацияОбОшибке();
		Сообщить(НСтр("ru='Описание=';en='Description='") + Инфо.Описание + "'");
		Сообщить(НСтр("ru='ИмяМодуля=';en='ModuleName='") + Инфо.ИмяМодуля + "'");
		Сообщить(НСтр("ru='НомерСтроки=';en='LineNumber='") + Инфо.НомерСтроки + "'");
		Сообщить(НСтр("ru='ИсходнаяСтрока=';en='SourceLine='") + Инфо.ИсходнаяСтрока + "'");
	КонецПопытки;
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции // СформироватьШапкуОРП()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьТЧОплатаПлатежнымиКартамиОРП(СсылкаНаНовыйДокумент,СписокИДЧековВСмене,КодКассы)
	//КодКассы = "9999"; 
	ПризнакБН = 10;
	//ЗапросОплатаПлатежнымиКартами = Новый Запрос;
	//	ЗапросОплатаПлатежнымиКартами.Текст = ВернутьТекстЗапросаОплатаПлатежнымиКартами(КодКассы,СписокИДЧековВСмене,ПризнакБН);
	// TODO Добавить получение кода кассы в запросе по плтежным картам ОРП
	//ЗапросОплатаПлатежнымиКартами.УстановитьПараметр("cashcode", );
	//ЗапросОплатаПлатежнымиКартами.УстановитьПараметр("documentid", СписокИДЧековВСмене);
	//ЗапросОплатаПлатежнымиКартами.УстановитьПараметр("valutoperation", "10");
	
	ТаблицаТЧОплатаПлатежнымиКартами = ТЧОплатаПлатежнымиКартами(КодКассы,СписокИДЧековВСмене,ПризнакБН);
	
	// Заполнение табличной части Товары
	НовыйДокумент = СсылкаНаНовыйДокумент.ПолучитьОбъект();
	
	Для каждого тСтрока Из ТаблицаТЧОплатаПлатежнымиКартами Цикл
		
		нСтрока = НовыйДокумент.ОплатаПлатежнымиКартами.Добавить();
		// TODO Сформировать выбор эквайрингового терминала
		нСтрока.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.НайтиПоКоду("ВШ-0000000000000000000000000000000000002");
		//	нСтрока.КодАвторизации =;
		нСтрока.НомерПлатежнойКарты = тСтрока.cardnum;
		
		
		нСтрока.Сумма = тСтрока.sumb;
		//нСтрока.ИдентификаторСтроки = ;
		
		// TODO Ставка НДС в строке чека
	КонецЦикла; 
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		// TODO Переделать все сообщения об ошибках в записи журнала регистрации
		Инфо = ИнформацияОбОшибке();
		Сообщить(НСтр("ru='Описание=';en='Description='") + Инфо.Описание + "'");
		Сообщить(НСтр("ru='ИмяМодуля=';en='ModuleName='") + Инфо.ИмяМодуля + "'");
		Сообщить(НСтр("ru='НомерСтроки=';en='LineNumber='") + Инфо.НомерСтроки + "'");
		Сообщить(НСтр("ru='ИсходнаяСтрока=';en='SourceLine='") + Инфо.ИсходнаяСтрока + "'");
	КонецПопытки;
	
	Возврат НовыйДокумент.Ссылка;
	
	
КонецФункции // СформироватьШапкуОРП()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьТЧНачислениеБонусныхБалловОРП()
	
	
	
КонецФункции // СформироватьШапкуОРП()




// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьТЧОплатаБонуснымиБалламиОРП()
	
	
	
КонецФункции // СформироватьШапкуОРП()



// Формирует запрос по кассовой смене по номеру
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ТЧОплатаПлатежнымиКартами(КодКассы,СписокИДЧековВСмене,ПризнакБН)
	
	
	ЗапросОплатаПлатежнымиКартами = Новый Запрос;
	ЗапросОплатаПлатежнымиКартами.Текст = 
	"ВЫБРАТЬ
	|	moneyitem.moneyitemid КАК moneyitemid,
	|	moneyitem.cashcode КАК cashcode,
	|	moneyitem.documentid КАК documentid,
	|	moneyitem.acode КАК acode,
	|	moneyitem.scode КАК scode,
	|	moneyitem.mtime КАК mtime,
	|	moneyitem.opcode КАК opcode,
	|	moneyitem.valcode КАК valcode,
	|	moneyitem.nrate КАК nrate,
	|	moneyitem.bond КАК bond,
	|	moneyitem.bond_quant КАК bond_quant,
	|	moneyitem.vsum КАК vsum,
	|	moneyitem.sumb КАК sumb,
	|	moneyitem.sumn КАК sumn,
	|	moneyitem.sume КАК sume,
	|	moneyitem.docnum КАК docnum,
	|	moneyitem.c_link КАК c_link,
	|	moneyitem.frnum КАК frnum,
	|	moneyitem.cardnum КАК cardnum,
	|	moneyitem.reverseoperation КАК reverseoperation,
	|	moneyitem.slip КАК slip,
	|	moneyitem.update_time КАК update_time,
	|	moneyitem.valutoperation КАК valutoperation,
	|	moneyitem.valname КАК valname,
	|	moneyitem.balance КАК balance,
	|	moneyitem.discnumber КАК discnumber,
	|	moneyitem.operationid КАК operationid,
	|	moneyitem.authcode КАК authcode,
	|	moneyitem.merchantid КАК merchantid,
	|	moneyitem.sourceoperationid КАК sourceoperationid,
	|	moneyitem.paymentmethod КАК paymentmethod,
	|	moneyitem.endcardnum КАК endcardnum
	|ИЗ
	|	ВнешнийИсточникДанных.КассовыйСервер.Таблица.moneyitem КАК moneyitem
	|ГДЕ
	|	moneyitem.cashcode = &cashcode
	|	И moneyitem.documentid В (&documentid)
	|	И moneyitem.valutoperation = &valutoperation";
	
	ЗапросОплатаПлатежнымиКартами.УстановитьПараметр("cashcode", КодКассы);
	ЗапросОплатаПлатежнымиКартами.УстановитьПараметр("documentid", СписокИДЧековВСмене);
	ЗапросОплатаПлатежнымиКартами.УстановитьПараметр("valutoperation", 10);
	
	ТаблицаТЧОплатаПлатежнымиКартами = ЗапросОплатаПлатежнымиКартами.Выполнить().Выгрузить();
	
	
	Возврат ТаблицаТЧОплатаПлатежнымиКартами;
	
КонецФункции // ВернутьТекстЗапросаКассовыеСмены()

&НаСервере
Процедура ТестВызоваНаСервере()
	//	Проверка = "ТестовыйМодуль";
	//[Проверка].ТестовоеСообщение();
	//// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТестВызова(Команда)
	ТестВызоваНаСервере();
КонецПроцедуры


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьНомераКассовыхСменСУказаннойДаты(ДатаПолученияСмены)
	
	
	
КонецФункции // ПолучитьНомераКассовыхСменСУказаннойДаты()


// Возвращает время прошлого опроса и сохраняет текущее//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьЗафиксироватьДатуОпроса()
	
	// TODO Дописать сериализацию константы после сохранение, для возможности восстановления из бэкапа
	СтароеВремя = Константы.крю_ВремяПоследнегоОпроса.Получить(); 
	Константы.крю_ВремяПоследнегоОпроса.Установить(ТекущаяДата());
	
	Возврат СтароеВремя;
	
КонецФункции // ПолучитьЗафиксироватьДатуОпроса()

&НаСервере
Процедура ВыгрузитьДанныеОбработкиНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеОбработки(Команда)
	ВыгрузитьДанныеОбработкиНаСервере();
КонецПроцедуры



// Дополняет таблицу значений-приемник данными из таблицы значений-источник
//
// Параметры:
// ТаблицаИсточник - Таблица значений - таблица из которой будут браться строки для заполнения
// ТаблицаПриемник - Таблица значений - таблица в которую будут добавлены строки из таблицы-источника
//
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) 

Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл

ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);

КонецЦикла;

КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СоздатьИзменитьЗаписьОКассовойСмене(КассаАртикс,НомерСмены,Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	крю_СоответствиеККМ.КассаКомплексная КАК КассаКомплексная,
	|	крю_СоответствиеККМ.КассаАртикс КАК КассаАртикс
	|ИЗ
	|	РегистрСведений.крю_СоответствиеККМ КАК крю_СоответствиеККМ
	|ГДЕ
	|	крю_СоответствиеККМ.КассаАртикс = &КассаАртикс";
	
	Запрос.УстановитьПараметр("КассаАртикс", КассаАртикс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
 	
	НаборЗаписей = РегистрыСведений.крю_КассовыеСмены.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(КассаАртикс); 
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	
	НоваяЗапись.КассаКомплексная = ВыборкаДетальныеЗаписи.КассаКомплексная; 
	НоваяЗапись.КассаАртикс = КассаАртикс; 
	НоваяЗапись.НомерКассовойСмены = НомерСмены; 
	НоваяЗапись.СтатусКассовойСмены = Статус; 
	
	НаборЗаписей.Записать(); 
	
КонецПроцедуры // СоздатьИзменитьЗаписьОКассовойСмене()
