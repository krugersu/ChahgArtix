
&НаСервере
Процедура мЗаписатьНастройкиНаСервере()
	
	СохранитьАдреса();	
	
КонецПроцедуры

&НаКлиенте
Процедура мЗаписатьНастройки(Команда)
	мЗаписатьНастройкиНаСервере();
КонецПроцедуры


Функция ПроверитьIP(тСтрока)
	
	Результат = Истина;
	тСтрока.Адрес = СтрЗаменить(тСтрока.Адрес," ","");
	
	мКонтрольАдреса =  СтрРазделить(тСтрока.Адрес,".",Истина);
	
	Если мКонтрольАдреса.Количество() <> 4 Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если (мКонтрольАдреса[0] = "") ИЛИ (мКонтрольАдреса[0] = "0") Тогда
		Результат = Ложь;
		мКонтрольАдреса[0] = 0;
	КонецЕсли;	
	сч = 0;
	Для каждого тЭлемент Из мКонтрольАдреса Цикл 
		Если тЭлемент = "" Тогда
			Результат = Ложь;
			тЭлемент = 0;
		КонецЕсли;	
		мКонтрольАдреса.Установить(сч,Число(тЭлемент));
		Если  (Число(тЭлемент) > 255)  Тогда 
			Результат = Ложь;
		КонецЕсли;	
		сч = сч +1;
	КонецЦикла;
	тСтрока.Адрес = СтрСоединить(мКонтрольАдреса,".");
	
	
	Возврат Результат;	 
	
КонецФункции	


//Функция СохранитьАдреса()
//	
//	Текст = Новый ЗаписьТекста(Объект.мФайлНастроек, КодировкаТекста.UTF8);
//	
//	Для каждого тСтрока Из Объект.СписокБД Цикл
//		GUID = тСтрока.мУзелОбмена.УникальныйИдентификатор();
//		Текст.ЗаписатьСтроку(""+СокрЛП(тСтрока.Наименование)+";"+СокрЛП(тСтрока.НаименованиеБД)+";"+СокрЛП(тСтрока.Адрес)+";"
//		+СокрЛП(тСтрока.НаименованиеФайла)+";"+СокрЛП(тСтрока.Пользователь)+";"+ ЗакрытьПароль(тСтрока.Пароль)+";"+GUID);		
//	КонецЦикла; 
//	
//	Текст.Закрыть();    
//	
//	ТекстJSON = "D:\Base\Выгрузка в ИП\adr.json";
//	// ТекстJSON = Объект.мФайлНастроек;
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
//	ПараметрыЗаписи = Новый  ПараметрыЗаписиJSON(, Символы.Таб);
//	ЗаписьJSON.ОткрытьФайл(ТекстJSON,,,ПараметрыЗаписи);
//	ЗаписьJSON.ЗаписатьНачалоОбъекта();
//	ЗаписьJSON.ЗаписатьИмяСвойства("Параметры БД");
//	ЗаписьJSON.ЗаписатьЗначение(Строка(ТекущаяДата()));
//	
//	Для каждого тСтрока Из Объект.СписокБД Цикл
//		GUID = тСтрока.мУзелОбмена.УникальныйИдентификатор();
//		
//		ЗаписьJSON.ЗаписатьНачалоМассива();
//		ЗаписьJSON.ЗаписатьИмяСвойства("Наименование");
//		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(тСтрока.Наименование));
//		ЗаписьJSON.ЗаписатьИмяСвойства("Наименование БД");
//		
//		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(тСтрока.НаименованиеБД));
//		ЗаписьJSON.ЗаписатьИмяСвойства("Адрес БД");
//		
//		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(тСтрока.Адрес));
//		ЗаписьJSON.ЗаписатьИмяСвойства("Файл для сохранения");
//		
//		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(тСтрока.НаименованиеФайла));
//		ЗаписьJSON.ЗаписатьИмяСвойства("Пользователь БД");
//		
//		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(тСтрока.Пользователь));
//		ЗаписьJSON.ЗаписатьИмяСвойства("Пароль пользовтеля БД");
//		
//		ЗаписьJSON.ЗаписатьЗначение(ЗакрытьПароль(тСтрока.Пароль));
//		ЗаписьJSON.ЗаписатьИмяСвойства("ГУИД узла обмена");
//		
//		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(GUID));
//		ЗаписьJSON.ЗаписатьКонецМассива();
//	КонецЦикла;
//	ЗаписьJSON.ЗаписатьКонецОбъекта();
//	ЗаписьJSON.Закрыть();
//	
//	
//	СтрокаJSON = "{""data"":"+ТЗВsimpleJSON(Объект.СписокБД.Выгрузить())+"}";
//	
//	
//	
//	
//	
//	Возврат Истина;
//	
//КонецФункции	
Функция СохранитьАдреса()
	
	Текст = Новый ЗаписьТекста(Объект.мФайлНастроек, КодировкаТекста.UTF8);
	
	Для каждого тСтрока Из Объект.СписокБД Цикл
		GUID = тСтрока.мУзелОбмена.УникальныйИдентификатор();
		Текст.ЗаписатьСтроку(""+СокрЛП(тСтрока.Наименование)+";"+СокрЛП(тСтрока.НаименованиеБД)+";"+СокрЛП(тСтрока.Адрес)+";"+СокрЛП(тСтрока.НаименованиеФайла)+";"+СокрЛП(тСтрока.Пользователь)+";"+ ЗакрытьПароль(тСтрока.Пароль)+";"+GUID);		
	КонецЦикла; 
	
	Текст.Закрыть();    
	
	Возврат Истина;
	
КонецФункции	


Функция ТЗВsimpleJSON(ТЗ)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для Каждого Стр Из ТЗ Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ЗаписьJSON.ЗаписатьИмяСвойства(СокрЛП(Колонка.Имя));
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Стр[Колонка.Имя]));              
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	Возврат ЗаписьJSON.Закрыть();
КонецФункции


&НаКлиенте
Процедура мФайлНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка= Ложь;
	если Не ВыбратьФайл(Объект.мФайлНастроек, РежимДиалогаВыбораФайла.Открытие, "Выбор файла данных", "*.dbf") тогда
		Сообщить("Не удалось выбрать файл!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФайл(ПолноеИмяФайла, Режим, Заголовок, Фильтр)
	
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок                 = Заголовок;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.Фильтр                   = Фильтр;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Диалог.ПолноеИмяФайла= ПолноеИмяФайла;
	КонецЕсли;
	
	Если Диалог.Выбрать() Тогда
		ПолноеИмяФайла= Диалог.ПолноеИмяФайла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


Функция ЗагрузитьАдреса()
	
	Объект.СписокБД.Очистить();
	
	Если (НЕ Объект.мФайлНастроек = "") И (ФайлСуществует(Объект.мФайлНастроек)) Тогда
		
		текФайл = Объект.мФайлНастроек;
		
	Иначе 
		Сообщить("Не указано имя файла для загрузки");
		Возврат Ложь;
	КонецЕсли;	
	//Если НЕ ФайлСуществует(текФайл) Тогда
	//	Объект.мФайлНастроек = "";
	//	 Возврат Ложь;
	//КонецЕсли;
	Текст = Новый ЧтениеТекста(текФайл, КодировкаТекста.UTF8);
	// перебор элементов справочника
	Стр = Текст.ПрочитатьСтроку();
	// пока строки в файле остались
	Пока Стр<>Неопределено Цикл
		// получить очередную строку файла 
		СтрНом = РазложитьСтрокуВМассивПодстрок(Стр,";");
		
		
		нСтрока						= Объект.СписокБД.Добавить();
		нСтрока.Флаг				= Истина;
		нСтрока.Наименование		= СокрЛП(СтрНом.Получить(0));
		нСтрока.НаименованиеБД		= СокрЛП(СтрНом.Получить(1)); 
		нСтрока.Адрес				= СокрЛП(СтрНом.Получить(2));  	
		нСтрока.НаименованиеФайла	= СокрЛП(СтрНом.Получить(3));  
		нСтрока.Пользователь		=  СокрЛП(СтрНом.Получить(4));  
		нСтрока.Пароль				= ОткрытьПароль(СокрЛП(СтрНом.Получить(5)));  
		УИД = Новый УникальныйИдентификатор(СокрЛП(СтрНом.Получить(6)));
		нСтрока.мУзелОбмена			= ПланыОбмена.ПоМагазину.ПолучитьСсылку(УИД);  
		Стр							= Текст.ПрочитатьСтроку();
		
		
		
		
	КонецЦикла;   
	
КонецФункции	

&НаСервере
Процедура мПрочитатьНастройкиНаСервере()
	ЗагрузитьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура мПрочитатьНастройки(Команда)
	мПрочитатьНастройкиНаСервере();
КонецПроцедуры


// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",строка 1,,,строка 2", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" строка1   строка 2", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


Функция ЗакрытьПароль(мПароль)
	
	СтрокаКодирования = мПароль;
	
	//ПотокВПамяти = Новый ПотокВПамяти();
	//ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	//ЗаписьДанных.ЗаписатьСтроку(СтрокаКодирования);
	//ДД = ПотокВпамяти.ЗакрытьИПолучитьДвоичныеДанные();
	//
	//СтрокаPs = Base64Строка(ДД);
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(СтрокаКодирования);
	
	СтрокаPs = Base64Строка(ДвоичныеДанныеСтроки);
	
	Возврат СтрокаPs;
	
КонецФункции	


Функция ОткрытьПароль(мПароль)
	
	ДвоичныеДанныеСтроки = Base64Значение(мПароль);
	
	СтрокаPs = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеСтроки);
	
	//ДД1 = Base64Значение(мПароль);
	//ЧтениеДанных = Новый ЧтениеДанных(ДД1);
	//СтрокаPs = ЧтениеДанных.ПрочитатьСтроку();
	//ЧтениеДанных.Закрыть();
	
	Возврат СтрокаPs;
	
КонецФункции	


&НаСервере
Процедура ВыгрузитьДанныеВБазыИПНаСервере()
	
	Если Объект.ИспользоватьCOM Тогда
		//ВыгрузитьЧерезCOM();
	ИначеЕсли 	Объект.ИспользоватьФайл Тогда
		ИтоговыйМассив = СформироватьДанныеДляВыгрузки();	
		ВыгрузитьЧерезФайл(ИтоговыйМассив);
		ВыгрузитьЧерезФайлДляУТ(ИтоговыйМассив); //Березуцкий
	КонецЕсли;	
	
КонецПроцедуры

Функция ВыгрузитьЧерезCOM()
	
	Для каждого тСтрока Из Объект.СписокБД Цикл
		Если  тСтрока.Флаг Тогда
			УстановитьСоединение(тСтрока.Адрес,тСтрока.НаименованиеБД,тСтрока.Пользователь,тСтрока.Пароль);
			//ВыгрузитьДанные();
			//РазорватьСоединение();
		КонецЕсли;
	КонецЦикла;	
	
	
	
	
	Возврат Истина;
КонецФункции	

Функция ВыгрузитьЧерезФайл(ИтоговыйМассив)
	//Массив = новый Массив;
	//
	//
	//ИмяФайлаОтправки = "D:\test.txt";
	//
	//ЗаписиJSON = Новый ЗаписьJSON;
	//ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	//
	//НастройкиСериал = Новый НастройкиСериализацииJSON;
	//НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	//НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	////		ЗаписиJSON.ЗаписатьНачалоМассива();
	//Для каждого тССылка  Из Объект.мНоменклатура  Цикл
	//	Значение = тССылка.мСсылкаНоменклатура.ПолучитьОбъект();
	//	Массив.Добавить(Значение);
	//	СтруктураДокумента = ПолучитьСтруктуру(тССылка.мСсылкаНоменклатура);
	//	//ЗаписатьJSON(ЗаписиJSON, СтруктураДокумента, НастройкиСериал);
	//	//	ЗаписиJSON.ЗаписатьНачалоОбъекта();
	//	
	//	//	 ЗаписиJSON.ЗаписатьКонецОбъекта();
	//КонецЦикла; 
	//СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, Массив, НазначениеТипаXML.Явное);
	//Сообщить( Значение.Ссылка.УникальныйИдентификатор());
	//
	////ЗаписиJSON.ЗаписатьКонецОбъекта();
	////ЗаписиJSON.ЗаписатьКонецМасссива();
	//ЗаписиJSON.Закрыть();
	//
	//Возврат Истина;
	//
	
	
	// ИмяФайлаОтправки = "D:\test.json";
	
	Для Каждого тСтрока Из Объект.СписокБД Цикл
		
		Если тСтрока.Флаг Тогда
			Если тСтрока.НаименованиеБД = "Комплексная" Тогда	//Березуцкий		
				Продолжить;
			КонецЕсли;	
			
			ИмяФайлаОтправки = тСтрока.НаименованиеФайла;	
			
			Сообщить(ИмяФайлаОтправки);
			ЗаписиJSON = Новый ЗаписьJSON;
			ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
			
			НастройкиСериал = Новый НастройкиСериализацииJSON;
			НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
			НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
			
			СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, ИтоговыйМассив, НазначениеТипаXML.Явное);
			
			
			ЗаписиJSON.Закрыть();
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	
	
	
КонецФункции	

&НаСервере
Процедура ВыгрузитьЧерезФайлДляУТ(ИтоговыйМассив)
	
	МассивСправки1ЕГАИС			= Новый Массив;
	ЗаполнитьСправки1ЕГАИС(МассивСправки1ЕГАИС);	
	Если МассивСправки1ЕГАИС.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивСправки1ЕГАИС);
	КонецЕсли;
	
	МассивСправки2ЕГАИС			= Новый Массив;
	ЗаполнитьСправки2ЕГАИС(МассивСправки2ЕГАИС);	
	Если МассивСправки2ЕГАИС.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивСправки2ЕГАИС);
	КонецЕсли;	
	
	Если Объект.Обрабатывать Тогда
		Для Каждого тСтрока Из Объект.СписокБД Цикл					
			Если тСтрока.Флаг И тСтрока.НаименованиеБД = "Комплексная" Тогда
				Для Каждого ЭлементМассива  Из ИтоговыйМассив  Цикл
					Если Строка(ТипЗнч(ЭлементМассива[0])) = "Структура" Тогда
						типМетаданных = "СоответствиеНоменклатурыЕГАИС";
					Иначе	
						типМетаданных = ЭлементМассива[0].Метаданные().Имя;
					КонецЕсли;
					Если типМетаданных+".json" = "ВидыНоменклатуры.json" Тогда
						Продолжить;
					КонецЕсли;
					Если типМетаданных+".json" = "СегментыНоменклатуры.json" Тогда
						Продолжить;
					КонецЕсли;
					Если типМетаданных+".json" = "СкидкиНаценки.json" Тогда
						Продолжить;
					КонецЕсли;
					Если типМетаданных+".json" = "УсловияПредоставленияСкидокНаценок.json" Тогда
						Продолжить;
					КонецЕсли;
					Если типМетаданных+".json" = "МаркетинговаяАкция.json" Тогда
						Продолжить;
					КонецЕсли;		
					Если типМетаданных+".json" = "НоменклатураСегмента.json" Тогда
						Продолжить;
					КонецЕсли;     
					Если типМетаданных+".json" = "ФизическиеЛица.json" Тогда
						Продолжить;
					КонецЕсли;			
					Если типМетаданных+".json" = "Номенклатура.json" Тогда
						ВыполнитьПравилаПереносаТабакМассивНоменклатуры(ЭлементМассива);
					КонецЕсли;			
					Если типМетаданных+".json" = "Штрихкоды.json" Тогда
						ВыполнитьПравилаПереносаТабакМассивДанныхШтрихкод(ЭлементМассива);
					КонецЕсли;			
					
					
					ИмяФайлаОтправки = тСтрока.НаименованиеФайла + типМетаданных + ".json";	
					
					//*
					ЗаписиJSON = Новый ЗаписьJSON;
					ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
					
					НастройкиСериал = Новый НастройкиСериализацииJSON;
					НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
					НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
					
					СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, ЭлементМассива, НазначениеТипаXML.Явное); 			
					
					ЗаписиJSON.Закрыть();
					//*
					
					//Каталог правил
					тКаталог  = Объект.мПравила;
					
					ПравилаДляШапки =  тКаталог + "S" + типМетаданных  + ".json" ;
					ПравилаДляТабЧасти = тКаталог + "F" + типМетаданных  + ".json"  ;
					ОбработатьФайлВыгрузки(ПравилаДляШапки,ПравилаДляТабЧасти, ИмяФайлаОтправки ,типМетаданных);
				КонецЦикла; 			
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;		
	
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФайлВыгрузки(тПравила,ПравилаДляТабЧасти, тДанные, тТип)  
	
	РабочийКаталог = Объект.мКонвертор;  
	ПутьКФайлуЗагрузчика = РабочийКаталог + "ExRules.exe";
	
	ФайлЗагрузчика = Новый Файл(ПутьКФайлуЗагрузчика);
	Если ФайлЗагрузчика.Существует() Тогда
		СтрокаПодключения =  ПутьКФайлуЗагрузчика + " " + тПравила + " " + ПравилаДляТабЧасти + " "  + тДанные  + " " + тТип;	
		КодВозврата = 0;
		ЗапуститьПриложение(СтрокаПодключения,РабочийКаталог,Истина,КодВозврата); 
		Если КодВозврата <> 0 Тогда
			Сообщить(СтрокаПодключения +" "+ Строка(ТекущаяДата()) + " - "+"Ошибка при обработке!!!!"+  + " - "+"КодВозврата - " + Строка(КодВозврата));
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры	


Функция ПолучитьСтруктуру(знач Объект)
	Структура = Новый Структура(); /// реквизиты     
	Для каждого Реквизит из Объект.Метаданные().СтандартныеРеквизиты Цикл
		Если ТипЗнч(Объект[Реквизит.Имя]) = тип("Число") ИЛИ ТипЗнч(Объект[Реквизит.Имя]) = тип("Дата") ИЛИ ТипЗнч(Объект[Реквизит.Имя]) = тип("Булево") тогда
			Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		иначе
			Структура.Вставить(Реквизит.Имя, Строка(Объект[Реквизит.Имя]));
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого Реквизит из Объект.Метаданные().Реквизиты Цикл
		Если ТипЗнч(Объект[Реквизит.Имя]) = тип("Число") ИЛИ ТипЗнч(Объект[Реквизит.Имя]) = тип("Дата") ИЛИ ТипЗнч(Объект[Реквизит.Имя]) = тип("Булево") тогда
			Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		иначе
			Структура.Вставить(Реквизит.Имя, Строка(Объект[Реквизит.Имя]));
		КонецЕсли;
		Если  ТипЗнч(Объект[Реквизит.Имя]) = тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(Объект[Реквизит.Имя])  = тип("СправочникСсылка.Контрагенты") тогда
			Структура.Вставить(Реквизит.Имя+"ИНН", Объект[Реквизит.Имя].ИНН);
			Структура.Вставить(Реквизит.Имя+"КПП", Объект[Реквизит.Имя].КПП);
		КонецЕсли;
		//т.к. код или номер объекта для индефикации
		Если НЕ Объект[Реквизит.Имя] = Неопределено и Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект[Реквизит.Имя])) тогда
			Структура.Вставить(Реквизит.Имя+"Код", Объект[Реквизит.Имя].Код);
		ИначеЕсли НЕ Объект[Реквизит.Имя] = Неопределено и Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект[Реквизит.Имя])) тогда
			Структура.Вставить(Реквизит.Имя+"Номер", Объект[Реквизит.Имя].Номер);
		КонецЕсли;
	КонецЦикла;    
	
	Для каждого ТабличнаяЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
		ТаблизазНач = Объект[ТабличнаяЧасть.Имя].Выгрузить();
		Для Каждого Колонка Из ТаблизазНач.Колонки цикл
			Массив =  ТаблизазНач.ВыгрузитьКолонку(Колонка.Имя);
			МассивВстроку = Новый Массив;
			МассивКодНомер = Новый Массив;
			МассивАртикул = Новый Массив;
			МассивИНН = Новый Массив;
			МассивКПП = Новый Массив;
			
			Для Каждого Стр из Массив цикл
				Если ТипЗнч(Стр) = тип("Число") ИЛИ ТипЗнч(Стр) = тип("Дата")  ИЛИ ТипЗнч(Стр) = тип("Булево") тогда
					МассивВстроку.Добавить( Стр);
				иначе
					МассивВстроку.Добавить( Строка(Стр));
				КонецЕсли;
				Если  ТипЗнч(Стр) = тип("СправочникСсылка.Номенклатура") тогда
					МассивАртикул.Добавить(Стр.Артикул);
				КонецЕсли;
				Если  ТипЗнч(Стр) = тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(Стр) = тип("СправочникСсылка.Контрагенты") тогда
					МассивИНН.Добавить(Стр.ИНН);
					МассивКПП.Добавить(Стр.КПП);
				КонецЕсли;
				//т.к. код или номер объекта для индефикации
				Если НЕ Стр = Неопределено и Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр)) тогда
					МассивКодНомер.Добавить(Стр.Код);
				ИначеЕсли НЕ Стр = Неопределено и Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр)) тогда
					МассивКодНомер.Добавить(Стр.Номер);
				КонецЕсли;
			КонецЦикла;
			Структура.Вставить(ТабличнаяЧасть.Имя+Колонка.Имя, МассивВстроку);
			//проверяем и добавляем дополнительные колонки
			Если МассивАртикул.Количество() > 0 тогда
				Структура.Вставить(ТабличнаяЧасть.Имя+Колонка.Имя + "Артикул", МассивАртикул);
			КонецЕсли;
			Если МассивКодНомер.Количество() > 0 тогда
				Структура.Вставить(ТабличнаяЧасть.Имя+Колонка.Имя + "КодНомер", МассивКодНомер);
			КонецЕсли;
			Если МассивКПП.Количество() > 0 тогда
				Структура.Вставить(ТабличнаяЧасть.Имя+Колонка.Имя + "КПП", МассивКодНомер);
			КонецЕсли;
			Если МассивИНН.Количество() > 0 тогда
				Структура.Вставить(ТабличнаяЧасть.Имя+Колонка.Имя + "ИНН", МассивКодНомер);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Структура.Вставить("ВыполнилВыгрузку", Пользователи.ТекущийПользователь().Наименование);
	Возврат Структура;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанныеВБазыИП(Команда)
	ВыгрузитьДанныеВБазыИПНаСервере();
КонецПроцедуры

Функция УстановитьСоединение(tSrvr,tRef,tUsr,tPwd)
	
	
	
	Соединитель = Новый COMОбъект("V83.COMConnector");
	//Соединитель = Новый COMОбъект("V83.Application");
	//	Если НЕ ФайловаяБаза Тогда
	стрСоединения = "Srvr="+""""+tSrvr+""""+";"+"Ref="+""""+tRef+""""+";"+"Usr="+""""+tUsr+""""+";"+"Pwd="+""""+tPwd+"""";
	//Иначе 
	//	стрСоединения = "File="+""""+tSrvr+""""+";"+"Usr="+""""+tUsr+""""+";"+"Pwd="+""""+tPwd+"""";
	//КонецЕсли;
	Сообщить("Попытка установки соединения по адресу: " + стрСоединения);
	
	Попытка
		Соединение = Соединитель.Connect(стрСоединения);
		Сообщить("Соединение успешено установлено." );
		//		ЭтаФорма.ЭлементыФормы.крКоннект.Картинка = тКоннект; 
		ПереключитьКартинку(Истина);
		Возврат Истина;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Сообщить("Соединение не удалось - " + Инфо.Описание);
		//		ЭтаФорма.ЭлементыФормы.крКоннект.Картинка = тНКоннект; 
		ПереключитьКартинку(Ложь);	
		Возврат Ложь;
	КонецПопытки;
	
	
	
КонецФункции

Процедура РазорватьСоединение()
	
	Соединение = Null;
	Сообщить("Соединение разорвано...." );
	
	
КонецПроцедуры	

Процедура ПереключитьКартинку(флаг)
	
	//ЭтаФорма.ЭлементыФормы.крКоннект.Видимость =  флаг;
	//ЭтаФорма.ЭлементыФормы.крНКоннект.Видимость = НЕ флаг;
	
	//Если флаг Тогда
	//	ЭтаФорма.ЭлементыФормы.Надпись1.ЦветТекста = ЦветАктивногоСоединения;
	//Иначе 
	//	ЭтаФорма.ЭлементыФормы.Надпись1.ЦветТекста = ЦветНеактивногоСоединения;
	//КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РазорватьТекущееСоединение(Команда)
	РазорватьСоединение();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ИспользоватьCOM = Ложь;
	Объект.ИспользоватьФайл = Истина;
	ЭтаФорма.Элементы.РазорватьСоединение.Доступность = Объект.ИспользоватьCOM;
	
	// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции +
	Объект.ВыгружатьСоответствиеЕГАИС  = Ложь;
	// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции -
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеНаСервере()
	
	// Сопутствующие справочники для выгрузки
	//СпСвязныхСправочниковКНоменклатуре = Новый СписокЗначений;
	//СпСвязныхСправочниковКНоменклатуре.Добавить("СтраныМира");
	//СпСвязныхСправочниковКНоменклатуре.Добавить("УпаковкиНоменклатуры");
	//СпСвязныхСправочниковКНоменклатуре.Добавить("НаборыУпаковок");
	//СпСвязныхСправочниковКНоменклатуре.Добавить("ВидыНоменклатуры");
	//
	
	//ИтоговыйМассив = новый Массив;
	//ТекущийМассив  = новый Массив;
	
	
	//МассивДанныхНоменклатура		= новый Массив;
	//МассивДанныхШтрихкод			= новый Массив;
	//
	// Основные данные
	//******************************************************************
	ЗарегистрированнаяНоменклатура();
	ЗарегистрированныеКонтрагенты();
	ЗарегистрированнаяАклкогольнаяПродукция();
	
	//ЗаполнитьМассивНоменклатуры(МассивДанныхНоменклатура);	
	//
	//Если МассивДанныхНоменклатура.Количество() > 0 Тогда
	//	ИтоговыйМассив.Добавить(МассивДанныхНоменклатура);
	//  КонецЕсли;
	//
	//ПолучитьШтрихкоды(МассивДанныхШтрихкод);
	//Если МассивДанныхШтрихкод.Количество() > 0 Тогда
	//	ИтоговыйМассив.Добавить(МассивДанныхШтрихкод);
	//КонецЕсли;
	////******************************************************************
	//
	//// Сопутствующие справочники
	////******************************************************************
	//Для Каждого тСправочник Из СпСвязныхСправочниковКНоменклатуре Цикл
	//	тек = ПолучитьДанныеПоСправочникам(тСправочник.Значение);
	//	Если тек.Количество() > 0 Тогда
	//		ИтоговыйМассив.Добавить(тек);
	//	КонецЕсли;
	//КонецЦикла;
	////******************************************************************
	//
	//
	//ВыгрузитьЧерезФайл(ИтоговыйМассив);
	//
	//ЗаписатьТекущиеДанные(ИтоговыйМассив);
	
	ЗарегистрированнаяСправки1ЕГАИС();
	ЗарегистрированнаяСправки2ЕГАИС();
	
КонецПроцедуры

Функция СформироватьДанныеДляВыгрузки()
	
	// Сопутствующие справочники для выгрузки
	СпСвязныхСправочниковКНоменклатуре = Новый СписокЗначений;
	СпСвязныхСправочниковКНоменклатуре.Добавить("СтраныМира");
	СпСвязныхСправочниковКНоменклатуре.Добавить("УпаковкиНоменклатуры");
	СпСвязныхСправочниковКНоменклатуре.Добавить("НаборыУпаковок");
	СпСвязныхСправочниковКНоменклатуре.Добавить("ВидыНоменклатуры");
	СпСвязныхСправочниковКНоменклатуре.Добавить("СерийныеНомера");

	
	
	ИтоговыйМассив = новый Массив;
	ТекущийМассив  = новый Массив;
	
	
	МассивДанныхНоменклатура		= новый Массив;
	МассивДанныхШтрихкод			= новый Массив;
	МассивДанныхКомплектующие		= новый Массив;
	МассивДанныхКонтрагенты			= новый Массив;
	МассивДанныхЦеныНоменклатуры	= новый Массив;
	МассивДанныхSKU					= новый Массив;
	МассивДанныхPLU					= новый Массив;
	МассивДанныхЦены				= новый Массив;
	
	// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции +
	МассивДанныхСоответствиеНомЕГАИС = новый Массив;	
	// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции +
	
	
	
	
	// Основные данные
	//******************************************************************
	//	ЗарегистрированнаяНоменклатура();
	ЗаполнитьМассивНоменклатуры(МассивДанныхНоменклатура);	
	//Березуцкий Перенос Табака
	//ВыполнитьПравилаПереносаТабакМассивНоменклатуры(МассивДанныхНоменклатура);
	
	Если МассивДанныхНоменклатура.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхНоменклатура);
	КонецЕсли;
	
	ПолучитьШтрихкоды(МассивДанныхШтрихкод);
	
	//Березуцкий Перенос Табака
	//ВыполнитьПравилаПереносаТабакМассивДанныхШтрихкод(МассивДанныхШтрихкод);
	
	Если МассивДанныхШтрихкод.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхШтрихкод);
	КонецЕсли;
	
	
	ПолучитьКомплектующие(МассивДанныхКомплектующие);
	Если МассивДанныхКомплектующие.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхКомплектующие);
	КонецЕсли;
	
	
	// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции +
	Если Объект.ВыгружатьСоответствиеЕГАИС  Тогда
		Сообщить("Выгружать!");
		ЗаполнитьМассивСоответствия(МассивДанныхСоответствиеНомЕГАИС);	
		//Сообщить(МассивДанныхСоответствиеНомЕГАИС.Количество());
		Если МассивДанныхСоответствиеНомЕГАИС.Количество() > 0 Тогда
			ИтоговыйМассив.Добавить(МассивДанныхСоответствиеНомЕГАИС);
		КонецЕсли;
		
	КонецЕсли; 
	
	// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции -
	
	//******************************************************************
	
	// Сопутствующие справочники
	//******************************************************************
	Для Каждого тСправочник Из СпСвязныхСправочниковКНоменклатуре Цикл
		тек = ПолучитьДанныеПоСправочникам(тСправочник.Значение);
		Если тек.Количество() > 0 Тогда
			ИтоговыйМассив.Добавить(тек);
		КонецЕсли;
	КонецЦикла;
	//******************************************************************
	
	
	//******************************************************************
	//	Зарегистрированные контрагенты
	ЗаполнитьМассивКонтрагентов(МассивДанныхКонтрагенты);	
	
	Если МассивДанныхКонтрагенты.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхКонтрагенты);
	КонецЕсли;
	
	
	ЗаполнитьМассивЦенНоменклатуры(МассивДанныхЦеныНоменклатуры);
	//Березуцкий Перенос Табака
	//	ВыполнитьПравилаПереносаТабакЦенНоменклатуры(МассивДанныхЦеныНоменклатуры);  	
	
	Если МассивДанныхЦеныНоменклатуры.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхЦеныНоменклатуры);
	КонецЕсли;
	
	ЗаполнитьМассивSKU(МассивДанныхSKU);
	Если МассивДанныхSKU.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхSKU);
	КонецЕсли;
	
	ЗаполнитьМассивPLU(МассивДанныхPLU);
	Если МассивДанныхPLU.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхPLU);
	КонецЕсли;
	
	
	//ВыгрузитьЧерезФайл(ИтоговыйМассив);
	
	
	ЗаполнитьМассивЦен(МассивДанныхЦены);
	Если МассивДанныхЦены.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхЦены);
	КонецЕсли;
	
	
	// Маркетинговые акции ***************************************************************
	
	МассивДанныхМаркетинговыеАкции			= Новый Массив;
	МассивДанныхСкидкиНаценки				= Новый Массив;
	МассивДанныхУсловияПредоставленияСкидок	= Новый Массив;
	МассивДанныхСегментНоменклатуры			= Новый Массив;
	МассивДанныхСоставСегментаНоменклатуры	= Новый Массив;
	
	
	ВыборкаСегментНоменклатуры = ЗаполнитьМассивПоАкциям(МассивДанныхМаркетинговыеАкции,МассивДанныхСкидкиНаценки,МассивДанныхУсловияПредоставленияСкидок,	МассивДанныхСегментНоменклатуры);
	//
	Если МассивДанныхМаркетинговыеАкции.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхМаркетинговыеАкции);
	КонецЕсли;
	
	Если МассивДанныхСкидкиНаценки.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхСкидкиНаценки);
	КонецЕсли;
	
	Если МассивДанныхУсловияПредоставленияСкидок.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхУсловияПредоставленияСкидок);
	КонецЕсли;
	
	Если МассивДанныхСегментНоменклатуры.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхСегментНоменклатуры);
	КонецЕсли;
	
	
	ЗаполнитьСоставСегментов(МассивДанныхСегментНоменклатуры,МассивДанныхСоставСегментаНоменклатуры);
	//
	Если МассивДанныхСоставСегментаНоменклатуры.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхСоставСегментаНоменклатуры);
	КонецЕсли;
	//
	// Маркетинговые акции ###############################################################
	
	
	// Слпоставление алкогольной продукции
	МассивДанныхАлкогольнаяПродукция			= Новый Массив;
	МассивДанныхСоответствиеНоменклатурыЕГАИС	= Новый Массив;
	МассивДанныхКлассификаторОрганизацийЕГАИС	= Новый Массив;
	
	ЗарегистрированныеПроизводителиАклкогольнойПродукции(МассивДанныхКлассификаторОрганизацийЕГАИС);
	
	Если МассивДанныхКлассификаторОрганизацийЕГАИС.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхКлассификаторОрганизацийЕГАИС);
	КонецЕсли;
	
	ЗаполнитьМассивАлкогольнаяПродукции(МассивДанныхАлкогольнаяПродукция);	
	
	Если МассивДанныхАлкогольнаяПродукция.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхАлкогольнаяПродукция);
	КонецЕсли;
	
	// Слпоставление алкогольной продукции ###############################################
	
	СформироватьМассиСопоставленнойАлкогольнойПродукции(МассивДанныхСоответствиеНоменклатурыЕГАИС);
	
	Если МассивДанныхСоответствиеНоменклатурыЕГАИС.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивДанныхСоответствиеНоменклатурыЕГАИС);
	КонецЕсли;     
	
	//Березуцкий
	МассивФизическиеЛица				= новый Массив;
	ЗаполнитьМассивФизическиеЛица(МассивФизическиеЛица);	
	
	Если МассивФизическиеЛица.Количество() > 0 Тогда
		ИтоговыйМассив.Добавить(МассивФизическиеЛица);
	КонецЕсли;
	
	Возврат ИтоговыйМассив;
	
	//ЗаписатьТекущиеДанные(ИтоговыйМассив);
КонецФункции

&НаСервере
Процедура ЗаписатьТекущиеДанные(ИтоговыйМассив)
	
	
	ИмяФайлаОтправки = "D:\test.txt";
	
	ЗаписиJSON = Новый ЗаписьJSON;
	ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	НастройкиСериал = Новый НастройкиСериализацииJSON;
	НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, ИтоговыйМассив, НазначениеТипаXML.Явное);
	
	
	ЗаписиJSON.Закрыть();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	ПолучитьДанныеНаСервере();
	ОбновитьОтображениеФормы();
	
КонецПроцедуры


#Область РаботаСФормой


&НаКлиенте
Процедура ОбновитьОтображениеФормы()
	
	ЭтаФорма.Элементы.грНоменклатура.Заголовок = "Номенклатура" +
	" (" + Объект.мНоменклатура.Количество()+")";
	
	ЭтаФорма.Элементы.грКонтрагент.Заголовок = "Контрагенты" +
	" (" + Объект.мКонтрагенты.Количество()+")";
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьАдреса();
	
	Если Объект.ЗагружатьИзмененияПриОткрытии Тогда
		ПолучитьДанныеНаСервере();
		ОбновитьОтображениеФормы();
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПереключитьФлажки(Первый,Второй)
	Объект[Первый] = НЕ Объект[Второй];
	ЭтаФорма.Элементы.РазорватьСоединение.Доступность =  Первый = "ИспользоватьФайл";
	ЭтаФорма.Элементы.РазорватьСоединение.Доступность = Объект.ИспользоватьCOM;
КонецПроцедуры	

&НаКлиенте
Процедура ИспользоватьCOMПриИзменении(Элемент)
	ПереключитьФлажки("ИспользоватьФайл","ИспользоватьCOM");
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьФайлПриИзменении(Элемент)
	
	// Пока не подключен ком, закомментирован вызов процедуры ПереключитьФлажки
	Объект.ИспользоватьФайл = Истина; // заглушка, убрать как появится ком
	//ПереключитьФлажки("ИспользоватьCOM","ИспользоватьФайл");
КонецПроцедуры


&НаСервере
Процедура СнятьВыделитьВсеНаСервере(Флаг)
	Для каждого тСтрока Из Объект.СписокБД Цикл
		тСтрока.Флаг = Флаг;
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ВыделитьВсе(Команда)
	СнятьВыделитьВсеНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	СнятьВыделитьВсеНаСервере(Ложь);
КонецПроцедуры




#КонецОбласти 



#Область РаботаСНоменклатурой

Функция ЗаполнитьМассивНоменклатуры(МассивДанных)
	
	Для каждого тССылка  Из Объект.мНоменклатура  Цикл
		Значение = тССылка.мСсылкаНоменклатура.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
КонецФункции



// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции +

Функция ЗаполнитьМассивСоответствия(МассивДанныхСоответствиеНомЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИСИзменения.Узел КАК Узел,
	|	СоответствиеНоменклатурыЕГАИСИзменения.НомерСообщения КАК НомерСообщения,
	|	СоответствиеНоменклатурыЕГАИСИзменения.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИСИзменения.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИСИзменения.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИСИзменения.Серия КАК Серия,
	|	СоответствиеНоменклатурыЕГАИСИзменения.Справка2 КАК Справка2,
	|	СоответствиеНоменклатурыЕГАИСИзменения.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС.Изменения КАК СоответствиеНоменклатурыЕГАИСИзменения
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИСИзменения.Узел = &Узел
	|	И  СоответствиеНоменклатурыЕГАИСИзменения.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Сообщить(Выборка.Количество());
	
	Если Выборка.Количество() = 0 Тогда
		Возврат МассивДанныхСоответствиеНомЕГАИС;
	Иначе
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
			Набор.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Прочитать();
			МассивДанныхСоответствиеНомЕГАИС.Добавить(Набор);
			//Сообщить(1);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивДанныхСоответствиеНомЕГАИС;
	
КонецФункции	

// 16.09.21 Пашков - добавление выгрузки сопоставления алк.продукции -


//Начало Березуцкий
Функция ЗаполнитьСправки1ЕГАИС(МассивДанных)
	
	Для каждого тССылка  Из Объект.мСправки1ЕГАИС  Цикл
		Значение = тССылка.мСсылкамСправки1ЕГАИС.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
КонецФункции                             

Функция ЗаполнитьСправки2ЕГАИС(МассивДанных)
	
	Для каждого тССылка  Из Объект.мСправки2ЕГАИС  Цикл
		Значение = тССылка.мСсылкамСправки2ЕГАИС.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
КонецФункции                             
//Конец Березуцкий

Функция ЗаполнитьМассивКонтрагентов(МассивДанных)
	
	Для каждого тССылка  Из Объект.мКонтрагенты  Цикл
		Значение = тССылка.мСсылкаКонтрагенты.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
КонецФункции


// Запрашивает список зарегистрированных к обмену элементов справочника
// Номенклатура по текущему указанному узлу
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗарегистрированнаяНоменклатура()
	
	Если НЕ ЗначениеЗаполнено( Объект.мУзел)  Тогда
		Сообщить("Невозможно прочитать изменения по Номенклатуре.Не указан узел обмена!!!"+ Символы.ПС+
		"Укажите узел или добавьте номенклатуру вручную.");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураИзменения.НомерСообщения КАК НомерСообщения,
	|	НоменклатураИзменения.Ссылка КАК мСсылкаНоменклатура
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|ГДЕ
	|	НоменклатураИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Сообщить("Изменения по Номенклатуре на данном узле отсутствуют!!!"+ Символы.ПС+ 
		"Попробуйте выбрать другой узел узел или добавьте номенклатуру вручную.");
		Возврат Ложь;
	Иначе
		ЗаполнитьСписокНоменклатуры(РезультатЗапроса);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗарегистрированнаяНоменклатура()

Функция ЗарегистрированнаяСправки2ЕГАИС()
	
	Если НЕ ЗначениеЗаполнено(Объект.мУзел)  Тогда
		Сообщить("Не указан узел обмена!!!");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справки2ЕГАИСИзменения.Ссылка КАК мСсылкамСправки2ЕГАИС,
	|	Справки2ЕГАИСИзменения.НомерСообщения КАК НомерСообщения                       
	|ИЗ
	|	Справочник.Справки2ЕГАИС.Изменения КАК Справки2ЕГАИСИзменения
	|ГДЕ
	|	Справки2ЕГАИСИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Объект.мСправки2ЕГАИС.Загрузить(РезультатЗапроса);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 


Функция ЗарегистрированнаяСправки1ЕГАИС()
	
	Если НЕ ЗначениеЗаполнено(Объект.мУзел)  Тогда
		Сообщить("Не указан узел обмена!!!");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справки1ЕГАИСИзменения.Ссылка КАК мСсылкамСправки1ЕГАИС,
	|	Справки1ЕГАИСИзменения.НомерСообщения КАК НомерСообщения                       
	|ИЗ
	|	Справочник.Справки1ЕГАИС.Изменения КАК Справки1ЕГАИСИзменения
	|ГДЕ
	|	Справки1ЕГАИСИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Объект.мСправки1ЕГАИС.Загрузить(РезультатЗапроса);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 


Функция ЗарегистрированныеКонтрагенты()
	
	// Если НЕ ЗначениеЗаполнено( Объект.мУзел)  Тогда
	//	Сообщить("Невозможно прочитать изменения по Номенклатуре.Не указан узел обмена!!!"+ Символы.ПС+
	//	"Укажите узел или добавьте номенклатуру вручную.");
	//	Возврат Ложь;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыИзменения.НомерСообщения КАК НомерСообщения,
	|	КонтрагентыИзменения.Ссылка КАК мСсылкаКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	|ГДЕ
	|	КонтрагентыИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		//Сообщить("Изменения по Контрагентам на данном узле отсутствуют!!!"+ Символы.ПС+ 
		//"Попробуйте выбрать другой узел узел или добавьте контрагента вручную.");
		Возврат Ложь;
	Иначе
		ЗаполнитьСписокКонтрагентов(РезультатЗапроса);
	КонецЕсли;
	
	Возврат Истина;
	
	
КонецФункции


Функция ЗарегистрированнаяАклкогольнаяПродукция();
	
	
	// Если НЕ ЗначениеЗаполнено( Объект.мУзел)  Тогда
	//	Сообщить("Невозможно прочитать изменения по Номенклатуре.Не указан узел обмена!!!"+ Символы.ПС+
	//	"Укажите узел или добавьте номенклатуру вручную.");
	//	Возврат Ложь;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИСИзменения.НомерСообщения КАК НомерСообщения,
	|	КлассификаторАлкогольнойПродукцииЕГАИСИзменения.Ссылка КАК мСсылкаАлкогольнаяПродукция
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Изменения КАК КлассификаторАлкогольнойПродукцииЕГАИСИзменения
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИСИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		//Сообщить("Изменения по Контрагентам на данном узле отсутствуют!!!"+ Символы.ПС+ 
		//"Попробуйте выбрать другой узел узел или добавьте контрагента вручную.");
		Возврат Ложь;
	Иначе
		ЗаполнитьСписокАлкогольнойПродукции(РезультатЗапроса);
	КонецЕсли;
	
	Возврат Истина;
	
	
КонецФункции


Функция ЗарегистрированныеПроизводителиАклкогольнойПродукции(МассивДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.НомерСообщения КАК НомерСообщения,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС.Изменения КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Значение =Выборка.Ссылка.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла;	
	
	Возврат МассивДанных;
КонецФункции


Функция ЗаполнитьМассивФизическиеЛица(МассивФизическиеЛица)
	
	Если НЕ ЗначениеЗаполнено(Объект.мУзел)  Тогда
		Сообщить("Не указан узел обмена!!!");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;             
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ФизическиеЛица.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ФизическиеЛица.Изменения КАК ФизическиеЛица
	                |ГДЕ
	                |	ФизическиеЛица.Узел = &Узел
	                |	И ФизическиеЛица.Ссылка В ИЕРАРХИИ(&Иерархия)
	                |";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел); 
	Иерархия = Справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");
	Запрос.УстановитьПараметр("Иерархия", Иерархия);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Значение =Выборка.Ссылка.ПолучитьОбъект();
		МассивФизическиеЛица.Добавить(Значение);
	КонецЦикла;		
	
	
	Возврат МассивФизическиеЛица;
	
КонецФункции	

// Запрашивает список зарегистрированных к обмену элементов справочника
// Номенклатура по текущему указанному узлу
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьДанныеПоСправочникам(текСправочник)
	
	МассивДанных = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(
	"ВЫБРАТЬ
	|	%1.НомерСообщения КАК НомерСообщения,
	|	%1.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.%1.Изменения КАК %1
	|ГДЕ
	|	%1.Узел = &Узел",текСправочник);
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	
	Для каждого тССылка  Из РезультатЗапроса  Цикл
		Значение = тССылка.Ссылка.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
	
	
КонецФункции



// Заполнятет табличную часть мНоменклатура сптском полученым 
// из узла
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаполнитьСписокНоменклатуры(РезультатЗапроса)
	
	Объект.мНоменклатура.Загрузить(РезультатЗапроса);
	
КонецФункции // ЗаполнитьСписокНоменклатуры()

Функция ЗаполнитьСписокКонтрагентов(РезультатЗапроса)
	
	Объект.мКонтрагенты.Загрузить(РезультатЗапроса);
	
КонецФункции


Функция ЗаполнитьСписокАлкогольнойПродукции(РезультатЗапроса)
	
	Объект.мАлкогольнаяПродукция.Загрузить(РезультатЗапроса);
	
	
КонецФункции


&НаСервере

// Получает список штрихкодов для текущего списка номенклатуры
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьШтрихкоды(МассивДанных)
	Для каждого тССылка  Из Объект.мНоменклатура  Цикл
		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		Отбор.Владелец.Установить(тССылка.мСсылкаНоменклатура);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			МассивДанных.Добавить(НаборЗаписей);
		КонецЕсли;
		//Для Каждого Запись из НаборЗаписей Цикл
		//	МассивДанных.Добавить(Запись);
		//КонецЦикла;		
	КонецЦикла; 
	
	
	// Добавляем массив штрихкодов по сертификатам - 28022022
	тек = ПолучитьДанныеПоСправочникам("СерийныеНомера");
	Если тек.Количество() > 0 Тогда
		Для каждого тССылка  Из тек  Цикл
			НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
			Отбор = НаборЗаписей.Отбор;
			Отбор.Владелец.Установить(тССылка.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				МассивДанных.Добавить(НаборЗаписей);
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат МассивДанных;
	
КонецФункции // ПолучитьШтрихкоды()





// Получает список комплектующих для текущего списка номенклатуры
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКомплектующие(МассивДанных)
	Для каждого тССылка  Из Объект.мНоменклатура  Цикл
		НаборЗаписей = РегистрыСведений.КомплектующиеНоменклатуры.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		Отбор.Номенклатура.Установить(тССылка.мСсылкаНоменклатура);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			МассивДанных.Добавить(НаборЗаписей);
		КонецЕсли;
	КонецЦикла; 
	Возврат МассивДанных;
	
КонецФункции // ПолучитьКомплектующие()


&НаСервере
Процедура ТестоваяНаСервере()
	ЗарегистрированнаяНоменклатура();
КонецПроцедуры

&НаСервере
Процедура testНаСервере()
	Массив = новый Массив;
	
	ИмяФайлаОтправки = "D:\test.txt";
	
	ЗаписиJSON = Новый ЗаписьJSON;
	ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	НастройкиСериал = Новый НастройкиСериализацииJSON;
	НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	Для Каждого тССылка Из Объект.мНоменклатура  Цикл
		Значение = тССылка.мСсылкаНоменклатура.ПолучитьОбъект();
	КонецЦикла;
	Значение = тССылка.мСсылкаНоменклатура.ПолучитьОбъект();
	
	Для каждого тССылка  Из Объект.мНоменклатура  Цикл
		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		Отбор.Владелец.Установить(тССылка.мСсылкаНоменклатура);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Массив.Добавить(НаборЗаписей);
		КонецЕсли;
	КонецЦикла; 
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, Значение, НазначениеТипаXML.Явное);
	ЗаписиJSON.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура test(Команда)
	//	testНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура мНоменклатураПослеУдаления(Элемент)
	ОбновитьОтображениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура мКонтрагентыПослеУдаления(Элемент)
	ОбновитьОтображениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура мКонтрагентыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьОтображениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура мНоменклатураПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьОтображениеФормы();
КонецПроцедуры


Функция ЗаполнитьМассивЦенНоменклатуры(МассивДанных)
	
	Для каждого тССылка  Из Объект.мЦеныКонтрагентов  Цикл
		Значение = тССылка.мСсылкаУстановкаЦенНоменклатурыКонтрагентов.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
КонецФункции



Функция ЗаполнитьМассивSKU(МассивДанных)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыТоваровSKUИзменения.НомерСообщения КАК НомерСообщения,
	|	КодыТоваровSKUИзменения.SKU КАК SKU,
	|	КодыТоваровSKUИзменения.Узел КАК Узел
	|ПОМЕСТИТЬ втКоды
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU.Изменения КАК КодыТоваровSKUИзменения
	|ГДЕ
	|	КодыТоваровSKUИзменения.Узел = &Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU КАК SKU,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	|	КодыТоваровSKU.Характеристика КАК Характеристика,
	|	КодыТоваровSKU.Упаковка КАК Упаковка,
	|	КодыТоваровSKU.УдалитьSKUГруппы КАК УдалитьSKUГруппы
	|ПОМЕСТИТЬ втРегистр
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРегистр.SKU КАК SKU,
	|	втРегистр.Номенклатура КАК Номенклатура,
	|	втРегистр.Характеристика КАК Характеристика,
	|	втРегистр.Упаковка КАК Упаковка,
	|	втКоды.SKU КАК SKU1
	|ИЗ
	|	втКоды КАК втКоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРегистр КАК втРегистр
	|		ПО втКоды.SKU = втРегистр.SKU";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	Для каждого тССылка  Из РезультатЗапроса  Цикл
		
		НаборЗаписей = РегистрыСведений.КодыТоваровSKU.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		Отбор.SKU.Установить(тССылка.SKU);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			МассивДанных.Добавить(НаборЗаписей);
		КонецЕсли;
	КонецЦикла; 
	Возврат МассивДанных;
	
	
КонецФункции


Функция ЗаполнитьМассивPLU(МассивДанных)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудованииИзменения.Узел КАК Узел,
	|	КодыТоваровPLUНаОборудованииИзменения.НомерСообщения КАК НомерСообщения,
	|	КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена КАК ПравилоОбмена,
	|	КодыТоваровPLUНаОборудованииИзменения.КодТовараPLU КАК КодТовараPLU
	|ПОМЕСТИТЬ втКоды
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании.Изменения КАК КодыТоваровPLUНаОборудованииИзменения
	|ГДЕ
	|	КодыТоваровPLUНаОборудованииИзменения.Узел = &Узел
	|	И КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена = &ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена,
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU
	|ПОМЕСТИТЬ втРегистр
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРегистр.ПравилоОбмена КАК ПравилоОбмена,
	|	втРегистр.КодТовараPLU КАК PLU,
	|	втРегистр.КодТовараSKU КАК КодТовараSKU
	|ИЗ
	|	втКоды КАК втКоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРегистр КАК втРегистр
	|		ПО втКоды.КодТовараPLU = втРегистр.КодТовараPLU";
	
	Запрос.УстановитьПараметр("ПравилоОбмена", Объект.мПравилоОбменаСОборудыванием);
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	Для каждого тССылка  Из РезультатЗапроса  Цикл
		
		НаборЗаписей = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		Отбор.КодТовараPLU.Установить(тССылка.PLU);
		Отбор.ПравилоОбмена.Установить(тССылка.ПравилоОбмена);
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			МассивДанных.Добавить(НаборЗаписей);
		КонецЕсли;
	КонецЦикла; 
	Возврат МассивДанных;
	
КонецФункции


&НаСервере
Процедура ВыгрузкаДокументаНаСервере()
	
	МассивДанных = Новый Массив;
	
	Для каждого тССылка  Из Объект.мЦеныКонтрагентов  Цикл
		Значение = тССылка.мСсылкаУстановкаЦенНоменклатурыКонтрагентов.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	
	
	ИмяФайлаОтправки = "D:\doc.json";
	
	ЗаписиJSON = Новый ЗаписьJSON;
	ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	НастройкиСериал = Новый НастройкиСериализацииJSON;
	НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, МассивДанных, НазначениеТипаXML.Явное);
	ЗаписиJSON.Закрыть();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаДокумента(Команда)
	ВыгрузкаДокументаНаСервере();
КонецПроцедуры



#КонецОбласти 

#Область РаботаСКонтрагентами

#КонецОбласти 





Функция ЗаполнитьМассивЦен(МассивДанных)
	
	Для каждого тССылка  Из Объект.мЦеныНоменклатуры  Цикл
		Значение = тССылка.мСсылкаУстановкаЦенНоменклатуры.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
КонецФункции



#Область МаркетинговыеАкции

// Маркетинговые акции


Функция ЗаполнитьМассивПоАкциям(МассивДанныхМаркетинговыеАкции,МассивДанныхСкидкиНаценки,МассивДанныхУсловияПредоставленияСкидок,	МассивДанныхСегментНоменклатуры);
	
	СсылкаНаДокументМаркетинговыеАкции = Новый СписокЗначений;
	
	Для каждого тССылка  Из Объект.мМаокетинговыеАкции  Цикл
		СсылкаНаДокументМаркетинговыеАкции.Добавить(тССылка.мСсылкаМаркетинговаяАкция);
	КонецЦикла; 
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркетинговаяАкцияСкидкиНаценки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втМаркетинговаяАкция
	|ИЗ
	|	Документ.МаркетинговаяАкция.СкидкиНаценки КАК МаркетинговаяАкцияСкидкиНаценки
	|ГДЕ
	|	МаркетинговаяАкцияСкидкиНаценки.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговаяАкцияСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
	|ПОМЕСТИТЬ втСкидкиНаценки
	|ИЗ
	|	втМаркетинговаяАкция КАК втМаркетинговаяАкция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркетинговаяАкция.СкидкиНаценки КАК МаркетинговаяАкцияСкидкиНаценки
	|		ПО втМаркетинговаяАкция.Ссылка = МаркетинговаяАкцияСкидкиНаценки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления
	|ПОМЕСТИТЬ втУсловия
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСкидкиНаценки КАК втСкидкиНаценки
	|		ПО СкидкиНаценкиУсловияПредоставления.Ссылка = втСкидкиНаценки.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСкидкиНаценки.СкидкаНаценка.СегментНоменклатурыПредоставления КАК СкидкаНаценкаСегментНоменклатурыПредоставления
	|ПОМЕСТИТЬ втСегмент
	|ИЗ
	|	втСкидкиНаценки КАК втСкидкиНаценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМаркетинговаяАкция.Ссылка КАК Ссылка
	|ИЗ
	|	втМаркетинговаяАкция КАК втМаркетинговаяАкция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСкидкиНаценки.СкидкаНаценка КАК Ссылка
	|ИЗ
	|	втСкидкиНаценки КАК втСкидкиНаценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУсловия.УсловиеПредоставления КАК Ссылка
	|ИЗ
	|	втУсловия КАК втУсловия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСегмент.СкидкаНаценкаСегментНоменклатурыПредоставления КАК Ссылка
	|ИЗ
	|	втСегмент КАК втСегмент";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокументМаркетинговыеАкции);
	
	
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаАкции					= МассивРезультатов[4].Выгрузить();
	ВыборкаСкидкаНаценка			= МассивРезультатов[5].Выгрузить();
	ВыборкаУсловиеПредоставления	= МассивРезультатов[6].Выгрузить();
	ВыборкаСегментНоменклатуры		= МассивРезультатов[7].Выгрузить();
	
	
	
	Для каждого тССылка  Из ВыборкаАкции  Цикл
		Значение = тССылка.Ссылка.ПолучитьОбъект();
		МассивДанныхМаркетинговыеАкции.Добавить(Значение);
	КонецЦикла; 
	
	Для каждого тССылка  Из ВыборкаСкидкаНаценка  Цикл
		Значение = тССылка.Ссылка.ПолучитьОбъект();
		МассивДанныхСкидкиНаценки.Добавить(Значение);
	КонецЦикла; 
	
	Для каждого тССылка  Из ВыборкаУсловиеПредоставления  Цикл
		Значение = тССылка.Ссылка.ПолучитьОбъект();
		МассивДанныхУсловияПредоставленияСкидок.Добавить(Значение);
	КонецЦикла; 
	
	Для каждого тССылка  Из ВыборкаСегментНоменклатуры  Цикл
		Значение = тССылка.Ссылка.ПолучитьОбъект();
		МассивДанныхСегментНоменклатуры.Добавить(Значение);
	КонецЦикла; 
	
	
	
	
	Возврат ВыборкаСегментНоменклатуры;
	
	
КонецФункции

Функция ЗаполнитьСоставСегментов(СегментНоменклатуры,СоставСегментаНоменклатуры)
	
	Для каждого тССылка  Из СегментНоменклатуры  Цикл
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		Отбор.Сегмент.Установить(тССылка.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			СоставСегментаНоменклатуры.Добавить(НаборЗаписей);
		КонецЕсли;
	КонецЦикла; 
	Возврат СоставСегментаНоменклатуры;
	
	
	
КонецФункции



#КонецОбласти 


Функция ЗаполнитьМассивАлкогольнаяПродукции(МассивДанных)	
	
	Для каждого тССылка  Из Объект.мАлкогольнаяПродукция  Цикл
		Значение = тССылка.мСсылкаАлкогольнаяПродукция.ПолучитьОбъект();
		МассивДанных.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивДанных;
	
	
КонецФункции

Функция СформироватьМассиСопоставленнойАлкогольнойПродукции(МассивДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИСИзменения.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИСИзменения.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИСИзменения.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС.Изменения КАК СоответствиеНоменклатурыЕГАИСИзменения
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИСИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Объект.мУзел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого тСоответствие  Из РезультатЗапроса Цикл
		СтруктураСооствествия = Новый Структура; 
		СтруктураСооствествия.Вставить("Номенклатура", тСоответствие.Номенклатура.УникальныйИдентификатор());
		СтруктураСооствествия.Вставить("АлкогольнаяПродукция", тСоответствие.АлкогольнаяПродукция.Код);
		МассивДанных.Добавить(СтруктураСооствествия);
		
	КонецЦикла;
	Возврат МассивДанных;
	
КонецФункции


Функция ФайлСуществует(Знач ПутьКФайлу)  
	Файл = Новый Файл(ПутьКФайлу); 
	Возврат Файл.Существует(); 
КонецФункции 

//Березуцкий
&НаСервере
Процедура ВыполнитьПравилаПереносаТабакМассивНоменклатуры(МассивДанныхНоменклатура)
	
	ТЗРезультатЗапросаТабак = Неопределено;
	
	Для Индекс = 0 По МассивДанныхНоменклатура.Количество() - 1 Цикл
		Если МассивДанныхНоменклатура[Индекс].ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
			Продолжить;
		КонецЕсли;	
		Если ТЗРезультатЗапросаТабак = Неопределено Тогда
			ТЗРезультатЗапросаТабак = ПолучитьТаблицуТабак();
		КонецЕсли;	
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", МассивДанныхНоменклатура[Индекс].Ссылка);		
		НайденныеСтроки = ТЗРезультатЗапросаТабак.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			МассивДанныхНоменклатура[Индекс] = НайденныеСтроки[0].НоменклатураПоУмолчанию.ПолучитьОбъект();
		Иначе 
			ВызватьИсключение ("Не найдено соотвествие для Номенклатуры: " +  Строка(МассивДанныхНоменклатура[Индекс]));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

//Березуцкий
&НаСервереБезКонтекста
Процедура ВыполнитьПравилаПереносаТабакМассивДанныхШтрихкод(МассивДанныхШтрихкод)
	ТЗРезультатЗапросаТабак = Неопределено;
	
	Для Индекс = 0 По МассивДанныхШтрихкод.Количество() - 1 Цикл
		Для Каждого Запись из МассивДанныхШтрихкод[Индекс] Цикл
			Если Запись.Владелец.ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда			
				Продолжить;
			КонецЕсли;	
			Если ТЗРезультатЗапросаТабак = Неопределено Тогда
				ТЗРезультатЗапросаТабак = ПолучитьТаблицуТабак();
			КонецЕсли;	
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", Запись.Владелец);		
			НайденныеСтроки = ТЗРезультатЗапросаТабак.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Запись.Владелец = НайденныеСтроки[0].НоменклатураПоУмолчанию;
			Иначе 
				ВызватьИсключение ("Не найдено соотвествие для Номенклатуры: " +  Строка(Запись.Владелец));
			КонецЕсли;
			
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

//Березуцкий
&НаСервереБезКонтекста
Процедура ВыполнитьПравилаПереносаТабакЦенНоменклатуры(МассивДанныхЦеныНоменклатуры)  	
	ТЗРезультатЗапросаТабак = Неопределено;
	
	Для Индекс = 0 По МассивДанныхЦеныНоменклатуры.Количество() - 1 Цикл
		Товары = МассивДанныхЦеныНоменклатуры[Индекс].Товары;
		Для ИндТов = 0 По Товары.Количество() - 1 Цикл
			Если Товары[ИндТов].Номенклатура.ОсобенностьУчета  <> Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
				Продолжить;
			КонецЕсли;
			Если ТЗРезультатЗапросаТабак = Неопределено Тогда
				ТЗРезультатЗапросаТабак = ПолучитьТаблицуТабак();
			КонецЕсли;	
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", Товары[ИндТов].Номенклатура);		
			НайденныеСтроки = ТЗРезультатЗапросаТабак.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Товары[ИндТов].Номенклатура = НайденныеСтроки[0].НоменклатураПоУмолчанию;
			Иначе 
				ВызватьИсключение ("Не найдено соотвествие для Номенклатуры: " +  Строка(Товары[ИндТов].Номенклатура));
			КонецЕсли;			
		КонецЦикла;		
	КонецЦикла;	
	
КонецПроцедуры		

//Березуцкий
&НаСервереБезКонтекста
Функция ПолучитьТаблицуТабак()
	
	//Табак
	МассивЗакупочныхЦен = Новый Массив;
	МассивЗакупочныхЦен.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор","ЗакупочнаяСургут"));
	МассивЗакупочныхЦен.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор","ЗакупочнаяЕкатеринбург"));
	МассивЗакупочныхЦен.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор","ЗакупочнаяТюмень"));
	МассивЗакупочныхЦен.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор","ЗакупочнаяБарнаул"));
	МассивЗакупочныхЦен.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор","Закупочная"));
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И Штрихкоды.Владелец.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|	И (Штрихкоды.Штрихкод ПОДОБНО ""________""
	|			ИЛИ Штрихкоды.Штрихкод ПОДОБНО ""_____________"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	|ПОМЕСТИТЬ ВТ_ЦенаПродажи
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			НЕ ВидЦены В (&МассивЗакупочныхЦен)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_Результат.Владелец
	|					ИЗ
	|						ВТ_Результат)
	|				И Цена < 1800) КАК ЦеныНоменклатурыСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Штрихкод КАК Штрихкод,
	|	ВТ_Результат.Владелец КАК Владелец,
	|	ЕСТЬNULL(ВТ_ЦенаПродажи.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ ВТ_ДоУдаления0
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦенаПродажи КАК ВТ_ЦенаПродажи
	|		ПО ВТ_Результат.Владелец = ВТ_ЦенаПродажи.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоУдаления0.Штрихкод КАК Штрихкод,
	|	ВТ_ДоУдаления0.Владелец КАК НоменклатураСсылка,
	|	ВТ_ДоУдаления0.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ПослеУдаления0
	|ИЗ
	|	ВТ_ДоУдаления0 КАК ВТ_ДоУдаления0
	|ГДЕ
	|	ВТ_ДоУдаления0.Цена > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПослеУдаления0.Штрихкод КАК Штрихкод,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	ВТ_ПослеУдаления0.Цена КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПослеУдаления0 КАК ВТ_ПослеУдаления0
	|		ПО (ВТ_ПослеУдаления0.НоменклатураСсылка = Номенклатура.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Цена"; 
	Запрос.УстановитьПараметр("МассивЗакупочныхЦен", МассивЗакупочныхЦен);
	ТЗРезультатЗапросаТабак = Запрос.Выполнить().Выгрузить();
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(100);
	ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	ТЗРезультатЗапросаТабак.Колонки.Добавить("ОбщееИмя", ОписаниеСтроки);	
	ТЗРезультатЗапросаТабак.Колонки.Добавить("НоменклатураПоУмолчанию", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//	ТЗРезультатЗапросаТабак.Колонки.Добавить("НоменклатураПоУмолчанию");
	ТЗРезультатЗапросаТабак.Колонки.Добавить("GUIDНоменклатурыПоУмолчанию");
	ТЗРезультатЗапросаТабак.Колонки.Добавить("АртикулПоУмолчанию");
	ТЗРезультатЗапросаТабак.Колонки.Добавить("КодПоУмолчанию");
	
	
	Для Каждого СтрокаТЗ Из ТЗРезультатЗапросаТабак Цикл
		НаименованиеИсходное = СтрокаТЗ.Номенклатура.Наименование;
		ЦенаПродажи = СтрокаТЗ.Цена; 
		ДлинаОбрезания = СтрНайти(НаименованиеИсходное, ЦенаПродажи);
		Если ДлинаОбрезания > 0 Тогда
			ИтоговоеНаименование = СокрЛП(Лев(НаименованиеИсходное, ДлинаОбрезания - 1));
			Если СтрНайти(Нрег(ИтоговоеНаименование), "маркир") > 0 Тогда
				ИтоговоеНаименование = СокрЛП(СтрЗаменить(ИтоговоеНаименование, "маркир", ""));
			КонецЕсли;
			СтрокаТЗ.ОбщееИмя = ИтоговоеНаименование;
		Иначе
			СтрокаТЗ.ОбщееИмя = НаименованиеИсходное;
		КонецЕсли;
	КонецЦикла;
	
	//Создадим массив шаблонов для дальнейшего использования
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗРезультат.ОбщееИмя КАК ОбщееИмя
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&ТЗРезультат КАК ТЗРезультат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремТаб.ОбщееИмя КАК ОбщееИмя
	|ИЗ
	|	ВремТаб КАК ВремТаб";
	Запрос.УстановитьПараметр("ТЗРезультат", ТЗРезультатЗапросаТабак);
	ТЗШтрихкоды = Запрос.Выполнить().Выгрузить();
	МассивУникальныхШаблоновИмени = ТЗШтрихкоды.ВыгрузитьКолонку("ОбщееИмя");
	
	Для Каждого СтрокаМассива ИЗ МассивУникальныхШаблоновИмени Цикл
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ОбщееИмя", СтрокаМассива);
		
		НайденныеСтроки = ТЗРезультатЗапросаТабак.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.НоменклатураПоУмолчанию = НайденныеСтроки[0].Номенклатура;
			НайденнаяСтрока.GUIDНоменклатурыПоУмолчанию = Строка(НайденныеСтроки[0].Номенклатура.УникальныйИдентификатор());
			НайденнаяСтрока.АртикулПоУмолчанию = НайденныеСтроки[0].Артикул;
			НайденнаяСтрока.КодПоУмолчанию = НайденныеСтроки[0].Код;				
		КонецЦикла;	
	КонецЦикла;
	
	Возврат ТЗРезультатЗапросаТабак;
	
КонецФункции
